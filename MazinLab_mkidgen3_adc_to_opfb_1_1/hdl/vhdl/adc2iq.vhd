-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc2iq is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    iin_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    iin_V_TVALID : IN STD_LOGIC;
    iin_V_TREADY : OUT STD_LOGIC;
    qin_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qin_V_TVALID : IN STD_LOGIC;
    qin_V_TREADY : OUT STD_LOGIC;
    iq_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    iq_V_V_full_n : IN STD_LOGIC;
    iq_V_V_write : OUT STD_LOGIC );
end;


architecture behav of adc2iq is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal iin_V_TDATA_blk_n : STD_LOGIC;
    signal qin_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_7_fu_215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_7_fu_205_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_195_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_6_fu_185_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_175_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_5_fu_165_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_4_fu_145_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_135_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_3_fu_125_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_115_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_2_fu_105_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_95_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_1_fu_85_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1356_fu_81_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_fu_77_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_iin_V_U_apdone_blk : STD_LOGIC;
    signal iin_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal iin_V_TVALID_int : STD_LOGIC;
    signal iin_V_TREADY_int : STD_LOGIC;
    signal regslice_both_iin_V_U_ack_in : STD_LOGIC;
    signal regslice_both_qin_V_U_apdone_blk : STD_LOGIC;
    signal qin_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal qin_V_TVALID_int : STD_LOGIC;
    signal qin_V_TREADY_int : STD_LOGIC;
    signal regslice_both_qin_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_iin_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => iin_V_TDATA,
        vld_in => iin_V_TVALID,
        ack_in => regslice_both_iin_V_U_ack_in,
        data_out => iin_V_TDATA_int,
        vld_out => iin_V_TVALID_int,
        ack_out => iin_V_TREADY_int,
        apdone_blk => regslice_both_iin_V_U_apdone_blk);

    regslice_both_qin_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => qin_V_TDATA,
        vld_in => qin_V_TVALID,
        ack_in => regslice_both_qin_V_U_ack_in,
        data_out => qin_V_TDATA_int,
        vld_out => qin_V_TVALID_int,
        ack_out => qin_V_TREADY_int,
        apdone_blk => regslice_both_qin_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    iin_V_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iin_V_TDATA_blk_n <= iin_V_TVALID_int;
        else 
            iin_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iin_V_TREADY_assign_proc : process(iin_V_TVALID, regslice_both_iin_V_U_ack_in)
    begin
        if (((iin_V_TVALID = ap_const_logic_1) and (regslice_both_iin_V_U_ack_in = ap_const_logic_1))) then 
            iin_V_TREADY <= ap_const_logic_1;
        else 
            iin_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    iin_V_TREADY_int_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iin_V_TREADY_int <= ap_const_logic_1;
        else 
            iin_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    iq_V_V_din <= (((((((((((((((tmp_7_fu_215_p4 & p_Result_10_7_fu_205_p4) & tmp_6_fu_195_p4) & p_Result_10_6_fu_185_p4) & tmp_5_fu_175_p4) & p_Result_10_5_fu_165_p4) & tmp_4_fu_155_p4) & p_Result_10_4_fu_145_p4) & tmp_3_fu_135_p4) & p_Result_10_3_fu_125_p4) & tmp_2_fu_115_p4) & p_Result_10_2_fu_105_p4) & tmp_1_fu_95_p4) & p_Result_10_1_fu_85_p4) & trunc_ln1356_fu_81_p1) & trunc_ln647_fu_77_p1);

    iq_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iq_V_V_full_n, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (iq_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iq_V_V_write <= ap_const_logic_1;
        else 
            iq_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_1_fu_85_p4 <= iin_V_TDATA_int(31 downto 16);
    p_Result_10_2_fu_105_p4 <= iin_V_TDATA_int(47 downto 32);
    p_Result_10_3_fu_125_p4 <= iin_V_TDATA_int(63 downto 48);
    p_Result_10_4_fu_145_p4 <= iin_V_TDATA_int(79 downto 64);
    p_Result_10_5_fu_165_p4 <= iin_V_TDATA_int(95 downto 80);
    p_Result_10_6_fu_185_p4 <= iin_V_TDATA_int(111 downto 96);
    p_Result_10_7_fu_205_p4 <= iin_V_TDATA_int(127 downto 112);

    qin_V_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qin_V_TDATA_blk_n <= qin_V_TVALID_int;
        else 
            qin_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    qin_V_TREADY_assign_proc : process(qin_V_TVALID, regslice_both_qin_V_U_ack_in)
    begin
        if (((qin_V_TVALID = ap_const_logic_1) and (regslice_both_qin_V_U_ack_in = ap_const_logic_1))) then 
            qin_V_TREADY <= ap_const_logic_1;
        else 
            qin_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    qin_V_TREADY_int_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iin_V_TVALID_int, qin_V_TVALID_int)
    begin
        if ((not(((real_start = ap_const_logic_0) or (qin_V_TVALID_int = ap_const_logic_0) or (iin_V_TVALID_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qin_V_TREADY_int <= ap_const_logic_1;
        else 
            qin_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_95_p4 <= qin_V_TDATA_int(31 downto 16);
    tmp_2_fu_115_p4 <= qin_V_TDATA_int(47 downto 32);
    tmp_3_fu_135_p4 <= qin_V_TDATA_int(63 downto 48);
    tmp_4_fu_155_p4 <= qin_V_TDATA_int(79 downto 64);
    tmp_5_fu_175_p4 <= qin_V_TDATA_int(95 downto 80);
    tmp_6_fu_195_p4 <= qin_V_TDATA_int(111 downto 96);
    tmp_7_fu_215_p4 <= qin_V_TDATA_int(127 downto 112);
    trunc_ln1356_fu_81_p1 <= qin_V_TDATA_int(16 - 1 downto 0);
    trunc_ln647_fu_77_p1 <= iin_V_TDATA_int(16 - 1 downto 0);
end behav;

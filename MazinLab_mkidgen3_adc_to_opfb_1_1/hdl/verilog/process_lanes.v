// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_lanes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        iqstream_V_V_dout,
        iqstream_V_V_empty_n,
        iqstream_V_V_read,
        lane_TREADY,
        lane_TDATA,
        lane_TVALID,
        lane_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] iqstream_V_V_dout;
input   iqstream_V_V_empty_n;
output   iqstream_V_V_read;
input   lane_TREADY;
output  [511:0] lane_TDATA;
output   lane_TVALID;
output  [0:0] lane_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg iqstream_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    regslice_both_lane_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] cycle_V;
reg   [0:0] primed;
reg   [255:0] even_lane_z1_V;
reg    even_delay_Array_V_ce0;
reg    even_delay_Array_V_we0;
wire   [255:0] even_delay_Array_V_q0;
reg    odd_delay_Array_V_ce0;
reg    odd_delay_Array_V_we0;
wire   [255:0] odd_delay_Array_V_q0;
reg    iqstream_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    lane_TDATA_blk_n;
reg   [255:0] tmp_V_reg_196;
wire   [0:0] icmp_ln879_fu_152_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [8:0] add_ln700_fu_184_p2;
wire   [0:0] or_ln56_fu_172_p2;
wire   [255:0] select_ln321_1_fu_159_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln114_fu_80_p2;
wire   [0:0] trunc_ln791_fu_76_p1;
wire   [511:0] p_Result_s_fu_112_p3;
wire   [511:0] p_Result_1_fu_120_p3;
wire   [511:0] select_ln43_1_fu_135_p3;
wire   [511:0] select_ln43_fu_127_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [511:0] lane_TDATA_int;
reg    lane_TVALID_int;
wire    lane_TREADY_int;
wire    regslice_both_lane_data_V_U_vld_out;
wire    regslice_both_lane_last_V_U_apdone_blk;
wire    regslice_both_lane_last_V_U_ack_in_dummy;
wire    regslice_both_lane_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 cycle_V = 9'd0;
#0 primed = 1'd0;
#0 even_lane_z1_V = 256'd0;
end

process_lanes_evebkb #(
    .DataWidth( 256 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
even_delay_Array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(even_delay_Array_V_ce0),
    .we0(even_delay_Array_V_we0),
    .d0(tmp_V_reg_196),
    .q0(even_delay_Array_V_q0)
);

process_lanes_evebkb #(
    .DataWidth( 256 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
odd_delay_Array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(odd_delay_Array_V_ce0),
    .we0(odd_delay_Array_V_we0),
    .d0(tmp_V_reg_196),
    .q0(odd_delay_Array_V_q0)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_lane_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(lane_TDATA_int),
    .vld_in(lane_TVALID_int),
    .ack_in(lane_TREADY_int),
    .data_out(lane_TDATA),
    .vld_out(regslice_both_lane_data_V_U_vld_out),
    .ack_out(lane_TREADY),
    .apdone_blk(regslice_both_lane_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_lane_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(icmp_ln879_fu_152_p2),
    .vld_in(lane_TVALID_int),
    .ack_in(regslice_both_lane_last_V_U_ack_in_dummy),
    .data_out(lane_TLAST),
    .vld_out(regslice_both_lane_last_V_U_vld_out),
    .ack_out(lane_TREADY),
    .apdone_blk(regslice_both_lane_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cycle_V <= add_ln700_fu_184_p2;
        even_lane_z1_V <= select_ln321_1_fu_159_p3;
        primed <= or_ln56_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_reg_196 <= iqstream_V_V_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        even_delay_Array_V_ce0 = xor_ln114_fu_80_p2;
    end else begin
        even_delay_Array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        even_delay_Array_V_we0 = xor_ln114_fu_80_p2;
    end else begin
        even_delay_Array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iqstream_V_V_blk_n = iqstream_V_V_empty_n;
    end else begin
        iqstream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iqstream_V_V_read = 1'b1;
    end else begin
        iqstream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        lane_TDATA_blk_n = lane_TREADY_int;
    end else begin
        lane_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lane_TVALID_int = 1'b1;
    end else begin
        lane_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odd_delay_Array_V_ce0 = trunc_ln791_fu_76_p1;
    end else begin
        odd_delay_Array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odd_delay_Array_V_we0 = trunc_ln791_fu_76_p1;
    end else begin
        odd_delay_Array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_184_p2 = (9'd1 + cycle_V);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((regslice_both_lane_data_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (iqstream_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((lane_TREADY_int == 1'b0) | (regslice_both_lane_data_V_U_apdone_blk == 1'b1))) | ((lane_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (iqstream_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((lane_TREADY_int == 1'b0) | (regslice_both_lane_data_V_U_apdone_blk == 1'b1))) | ((lane_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (iqstream_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (iqstream_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (regslice_both_lane_data_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln879_fu_152_p2 = ((cycle_V == 9'd511) ? 1'b1 : 1'b0);

assign lane_TDATA_int = ((trunc_ln791_fu_76_p1[0:0] === 1'b1) ? select_ln43_1_fu_135_p3 : select_ln43_fu_127_p3);

assign lane_TVALID = regslice_both_lane_data_V_U_vld_out;

assign or_ln56_fu_172_p2 = (primed | icmp_ln879_fu_152_p2);

assign p_Result_1_fu_120_p3 = {{tmp_V_reg_196}, {even_lane_z1_V}};

assign p_Result_s_fu_112_p3 = {{odd_delay_Array_V_q0}, {even_lane_z1_V}};

assign select_ln321_1_fu_159_p3 = ((trunc_ln791_fu_76_p1[0:0] === 1'b1) ? even_delay_Array_V_q0 : tmp_V_reg_196);

assign select_ln43_1_fu_135_p3 = ((primed[0:0] === 1'b1) ? p_Result_1_fu_120_p3 : 512'd0);

assign select_ln43_fu_127_p3 = ((primed[0:0] === 1'b1) ? p_Result_s_fu_112_p3 : 512'd0);

assign trunc_ln791_fu_76_p1 = cycle_V[0:0];

assign xor_ln114_fu_80_p2 = (trunc_ln791_fu_76_p1 ^ 1'd1);

endmodule //process_lanes

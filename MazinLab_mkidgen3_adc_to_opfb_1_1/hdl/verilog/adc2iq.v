// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adc2iq (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        iin_V_TDATA,
        iin_V_TVALID,
        iin_V_TREADY,
        qin_V_TDATA,
        qin_V_TVALID,
        qin_V_TREADY,
        iq_V_V_din,
        iq_V_V_full_n,
        iq_V_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] iin_V_TDATA;
input   iin_V_TVALID;
output   iin_V_TREADY;
input  [127:0] qin_V_TDATA;
input   qin_V_TVALID;
output   qin_V_TREADY;
output  [255:0] iq_V_V_din;
input   iq_V_V_full_n;
output   iq_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg iin_V_TREADY;
reg qin_V_TREADY;
reg iq_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    iin_V_TDATA_blk_n;
reg    qin_V_TDATA_blk_n;
reg    ap_block_state1;
wire   [15:0] tmp_7_fu_215_p4;
wire   [15:0] p_Result_10_7_fu_205_p4;
wire   [15:0] tmp_6_fu_195_p4;
wire   [15:0] p_Result_10_6_fu_185_p4;
wire   [15:0] tmp_5_fu_175_p4;
wire   [15:0] p_Result_10_5_fu_165_p4;
wire   [15:0] tmp_4_fu_155_p4;
wire   [15:0] p_Result_10_4_fu_145_p4;
wire   [15:0] tmp_3_fu_135_p4;
wire   [15:0] p_Result_10_3_fu_125_p4;
wire   [15:0] tmp_2_fu_115_p4;
wire   [15:0] p_Result_10_2_fu_105_p4;
wire   [15:0] tmp_1_fu_95_p4;
wire   [15:0] p_Result_10_1_fu_85_p4;
wire   [15:0] trunc_ln1356_fu_81_p1;
wire   [15:0] trunc_ln647_fu_77_p1;
reg   [0:0] ap_NS_fsm;
wire    regslice_both_iin_V_U_apdone_blk;
wire   [127:0] iin_V_TDATA_int;
wire    iin_V_TVALID_int;
reg    iin_V_TREADY_int;
wire    regslice_both_iin_V_U_ack_in;
wire    regslice_both_qin_V_U_apdone_blk;
wire   [127:0] qin_V_TDATA_int;
wire    qin_V_TVALID_int;
reg    qin_V_TREADY_int;
wire    regslice_both_qin_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

regslice_both #(
    .DataWidth( 128 ))
regslice_both_iin_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(iin_V_TDATA),
    .vld_in(iin_V_TVALID),
    .ack_in(regslice_both_iin_V_U_ack_in),
    .data_out(iin_V_TDATA_int),
    .vld_out(iin_V_TVALID_int),
    .ack_out(iin_V_TREADY_int),
    .apdone_blk(regslice_both_iin_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qin_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(qin_V_TDATA),
    .vld_in(qin_V_TVALID),
    .ack_in(regslice_both_qin_V_U_ack_in),
    .data_out(qin_V_TDATA_int),
    .vld_out(qin_V_TVALID_int),
    .ack_out(qin_V_TREADY_int),
    .apdone_blk(regslice_both_qin_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iin_V_TDATA_blk_n = iin_V_TVALID_int;
    end else begin
        iin_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((iin_V_TVALID == 1'b1) & (regslice_both_iin_V_U_ack_in == 1'b1))) begin
        iin_V_TREADY = 1'b1;
    end else begin
        iin_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iin_V_TREADY_int = 1'b1;
    end else begin
        iin_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (iq_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iq_V_V_write = 1'b1;
    end else begin
        iq_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qin_V_TDATA_blk_n = qin_V_TVALID_int;
    end else begin
        qin_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((qin_V_TVALID == 1'b1) & (regslice_both_qin_V_U_ack_in == 1'b1))) begin
        qin_V_TREADY = 1'b1;
    end else begin
        qin_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qin_V_TREADY_int = 1'b1;
    end else begin
        qin_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (qin_V_TVALID_int == 1'b0) | (iin_V_TVALID_int == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign iq_V_V_din = {{{{{{{{{{{{{{{{tmp_7_fu_215_p4}, {p_Result_10_7_fu_205_p4}}, {tmp_6_fu_195_p4}}, {p_Result_10_6_fu_185_p4}}, {tmp_5_fu_175_p4}}, {p_Result_10_5_fu_165_p4}}, {tmp_4_fu_155_p4}}, {p_Result_10_4_fu_145_p4}}, {tmp_3_fu_135_p4}}, {p_Result_10_3_fu_125_p4}}, {tmp_2_fu_115_p4}}, {p_Result_10_2_fu_105_p4}}, {tmp_1_fu_95_p4}}, {p_Result_10_1_fu_85_p4}}, {trunc_ln1356_fu_81_p1}}, {trunc_ln647_fu_77_p1}};

assign p_Result_10_1_fu_85_p4 = {{iin_V_TDATA_int[31:16]}};

assign p_Result_10_2_fu_105_p4 = {{iin_V_TDATA_int[47:32]}};

assign p_Result_10_3_fu_125_p4 = {{iin_V_TDATA_int[63:48]}};

assign p_Result_10_4_fu_145_p4 = {{iin_V_TDATA_int[79:64]}};

assign p_Result_10_5_fu_165_p4 = {{iin_V_TDATA_int[95:80]}};

assign p_Result_10_6_fu_185_p4 = {{iin_V_TDATA_int[111:96]}};

assign p_Result_10_7_fu_205_p4 = {{iin_V_TDATA_int[127:112]}};

assign start_out = real_start;

assign tmp_1_fu_95_p4 = {{qin_V_TDATA_int[31:16]}};

assign tmp_2_fu_115_p4 = {{qin_V_TDATA_int[47:32]}};

assign tmp_3_fu_135_p4 = {{qin_V_TDATA_int[63:48]}};

assign tmp_4_fu_155_p4 = {{qin_V_TDATA_int[79:64]}};

assign tmp_5_fu_175_p4 = {{qin_V_TDATA_int[95:80]}};

assign tmp_6_fu_195_p4 = {{qin_V_TDATA_int[111:96]}};

assign tmp_7_fu_215_p4 = {{qin_V_TDATA_int[127:112]}};

assign trunc_ln1356_fu_81_p1 = qin_V_TDATA_int[15:0];

assign trunc_ln647_fu_77_p1 = iin_V_TDATA_int[15:0];

endmodule //adc2iq

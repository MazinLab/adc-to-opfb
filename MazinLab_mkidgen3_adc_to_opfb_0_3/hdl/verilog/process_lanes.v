// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_lanes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        iqs_0_V_read,
        iqs_1_V_read,
        iqs_2_V_read,
        iqs_3_V_read,
        iqs_4_V_read,
        iqs_5_V_read,
        iqs_6_V_read,
        iqs_7_V_read,
        lane_0_TDATA,
        lane_0_TVALID,
        lane_0_TREADY,
        lane_1_TDATA,
        lane_1_TVALID,
        lane_1_TREADY,
        lane_2_TDATA,
        lane_2_TVALID,
        lane_2_TREADY,
        lane_3_TDATA,
        lane_3_TVALID,
        lane_3_TREADY,
        lane_4_TDATA,
        lane_4_TVALID,
        lane_4_TREADY,
        lane_5_TDATA,
        lane_5_TVALID,
        lane_5_TREADY,
        lane_6_TDATA,
        lane_6_TVALID,
        lane_6_TREADY,
        lane_7_TDATA,
        lane_7_TVALID,
        lane_7_TREADY,
        lane_8_TDATA,
        lane_8_TVALID,
        lane_8_TREADY,
        lane_9_TDATA,
        lane_9_TVALID,
        lane_9_TREADY,
        lane_10_TDATA,
        lane_10_TVALID,
        lane_10_TREADY,
        lane_11_TDATA,
        lane_11_TVALID,
        lane_11_TREADY,
        lane_12_TDATA,
        lane_12_TVALID,
        lane_12_TREADY,
        lane_13_TDATA,
        lane_13_TVALID,
        lane_13_TREADY,
        lane_14_TDATA,
        lane_14_TVALID,
        lane_14_TREADY,
        lane_15_TDATA,
        lane_15_TVALID,
        lane_15_TREADY,
        lane_0_TLAST,
        lane_1_TLAST,
        lane_2_TLAST,
        lane_3_TLAST,
        lane_4_TLAST,
        lane_5_TLAST,
        lane_6_TLAST,
        lane_7_TLAST,
        lane_8_TLAST,
        lane_9_TLAST,
        lane_10_TLAST,
        lane_11_TLAST,
        lane_12_TLAST,
        lane_13_TLAST,
        lane_14_TLAST,
        lane_15_TLAST,
        lane_0_TDATA_blk_n,
        lane_1_TDATA_blk_n,
        lane_2_TDATA_blk_n,
        lane_3_TDATA_blk_n,
        lane_4_TDATA_blk_n,
        lane_5_TDATA_blk_n,
        lane_6_TDATA_blk_n,
        lane_7_TDATA_blk_n,
        lane_8_TDATA_blk_n,
        lane_9_TDATA_blk_n,
        lane_10_TDATA_blk_n,
        lane_11_TDATA_blk_n,
        lane_12_TDATA_blk_n,
        lane_13_TDATA_blk_n,
        lane_14_TDATA_blk_n,
        lane_15_TDATA_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] iqs_0_V_read;
input  [31:0] iqs_1_V_read;
input  [31:0] iqs_2_V_read;
input  [31:0] iqs_3_V_read;
input  [31:0] iqs_4_V_read;
input  [31:0] iqs_5_V_read;
input  [31:0] iqs_6_V_read;
input  [31:0] iqs_7_V_read;
output  [31:0] lane_0_TDATA;
output   lane_0_TVALID;
input   lane_0_TREADY;
output  [31:0] lane_1_TDATA;
output   lane_1_TVALID;
input   lane_1_TREADY;
output  [31:0] lane_2_TDATA;
output   lane_2_TVALID;
input   lane_2_TREADY;
output  [31:0] lane_3_TDATA;
output   lane_3_TVALID;
input   lane_3_TREADY;
output  [31:0] lane_4_TDATA;
output   lane_4_TVALID;
input   lane_4_TREADY;
output  [31:0] lane_5_TDATA;
output   lane_5_TVALID;
input   lane_5_TREADY;
output  [31:0] lane_6_TDATA;
output   lane_6_TVALID;
input   lane_6_TREADY;
output  [31:0] lane_7_TDATA;
output   lane_7_TVALID;
input   lane_7_TREADY;
output  [31:0] lane_8_TDATA;
output   lane_8_TVALID;
input   lane_8_TREADY;
output  [31:0] lane_9_TDATA;
output   lane_9_TVALID;
input   lane_9_TREADY;
output  [31:0] lane_10_TDATA;
output   lane_10_TVALID;
input   lane_10_TREADY;
output  [31:0] lane_11_TDATA;
output   lane_11_TVALID;
input   lane_11_TREADY;
output  [31:0] lane_12_TDATA;
output   lane_12_TVALID;
input   lane_12_TREADY;
output  [31:0] lane_13_TDATA;
output   lane_13_TVALID;
input   lane_13_TREADY;
output  [31:0] lane_14_TDATA;
output   lane_14_TVALID;
input   lane_14_TREADY;
output  [31:0] lane_15_TDATA;
output   lane_15_TVALID;
input   lane_15_TREADY;
output   lane_0_TLAST;
output   lane_1_TLAST;
output   lane_2_TLAST;
output   lane_3_TLAST;
output   lane_4_TLAST;
output   lane_5_TLAST;
output   lane_6_TLAST;
output   lane_7_TLAST;
output   lane_8_TLAST;
output   lane_9_TLAST;
output   lane_10_TLAST;
output   lane_11_TLAST;
output   lane_12_TLAST;
output   lane_13_TLAST;
output   lane_14_TLAST;
output   lane_15_TLAST;
output   lane_0_TDATA_blk_n;
output   lane_1_TDATA_blk_n;
output   lane_2_TDATA_blk_n;
output   lane_3_TDATA_blk_n;
output   lane_4_TDATA_blk_n;
output   lane_5_TDATA_blk_n;
output   lane_6_TDATA_blk_n;
output   lane_7_TDATA_blk_n;
output   lane_8_TDATA_blk_n;
output   lane_9_TDATA_blk_n;
output   lane_10_TDATA_blk_n;
output   lane_11_TDATA_blk_n;
output   lane_12_TDATA_blk_n;
output   lane_13_TDATA_blk_n;
output   lane_14_TDATA_blk_n;
output   lane_15_TDATA_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg lane_0_TVALID;
reg lane_1_TVALID;
reg lane_2_TVALID;
reg lane_3_TVALID;
reg lane_4_TVALID;
reg lane_5_TVALID;
reg lane_6_TVALID;
reg lane_7_TVALID;
reg lane_8_TVALID;
reg lane_9_TVALID;
reg lane_10_TVALID;
reg lane_11_TVALID;
reg lane_12_TVALID;
reg lane_13_TVALID;
reg lane_14_TVALID;
reg lane_15_TVALID;
reg lane_0_TDATA_blk_n;
reg lane_1_TDATA_blk_n;
reg lane_2_TDATA_blk_n;
reg lane_3_TDATA_blk_n;
reg lane_4_TDATA_blk_n;
reg lane_5_TDATA_blk_n;
reg lane_6_TDATA_blk_n;
reg lane_7_TDATA_blk_n;
reg lane_8_TDATA_blk_n;
reg lane_9_TDATA_blk_n;
reg lane_10_TDATA_blk_n;
reg lane_11_TDATA_blk_n;
reg lane_12_TDATA_blk_n;
reg lane_13_TDATA_blk_n;
reg lane_14_TDATA_blk_n;
reg lane_15_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] cycle_V;
reg   [31:0] even_lane_z1_V_0;
reg   [31:0] even_lane_z1_V_1;
reg   [31:0] even_lane_z1_V_2;
reg   [31:0] even_lane_z1_V_3;
reg   [31:0] even_lane_z1_V_4;
reg   [31:0] even_lane_z1_V_5;
reg   [31:0] even_lane_z1_V_6;
reg   [31:0] even_lane_z1_V_7;
reg    delays_Array_V_0_ce0;
reg    delays_Array_V_0_we0;
wire   [31:0] delays_Array_V_0_q0;
reg    delays_Array_V_1_ce0;
reg    delays_Array_V_1_we0;
wire   [31:0] delays_Array_V_1_q0;
reg    delays_Array_V_2_ce0;
reg    delays_Array_V_2_we0;
wire   [31:0] delays_Array_V_2_q0;
reg    delays_Array_V_3_ce0;
reg    delays_Array_V_3_we0;
wire   [31:0] delays_Array_V_3_q0;
reg    delays_Array_V_4_ce0;
reg    delays_Array_V_4_we0;
wire   [31:0] delays_Array_V_4_q0;
reg    delays_Array_V_5_ce0;
reg    delays_Array_V_5_we0;
wire   [31:0] delays_Array_V_5_q0;
reg    delays_Array_V_6_ce0;
reg    delays_Array_V_6_we0;
wire   [31:0] delays_Array_V_6_q0;
reg    delays_Array_V_7_ce0;
reg    delays_Array_V_7_we0;
wire   [31:0] delays_Array_V_7_q0;
reg    delays_Array_V_8_ce0;
reg    delays_Array_V_8_we0;
wire   [31:0] delays_Array_V_8_q0;
reg    delays_Array_V_9_ce0;
reg    delays_Array_V_9_we0;
wire   [31:0] delays_Array_V_9_q0;
reg    delays_Array_V_10_ce0;
reg    delays_Array_V_10_we0;
wire   [31:0] delays_Array_V_10_q0;
reg    delays_Array_V_11_ce0;
reg    delays_Array_V_11_we0;
wire   [31:0] delays_Array_V_11_q0;
reg    delays_Array_V_12_ce0;
reg    delays_Array_V_12_we0;
wire   [31:0] delays_Array_V_12_q0;
reg    delays_Array_V_13_ce0;
reg    delays_Array_V_13_we0;
wire   [31:0] delays_Array_V_13_q0;
reg    delays_Array_V_14_ce0;
reg    delays_Array_V_14_we0;
wire   [31:0] delays_Array_V_14_q0;
reg    delays_Array_V_15_ce0;
reg    delays_Array_V_15_we0;
wire   [31:0] delays_Array_V_15_q0;
wire   [7:0] add_ln700_fu_816_p2;
reg    ap_block_state1_io;
wire   [31:0] select_ln28_fu_420_p3;
wire   [31:0] select_ln28_2_fu_490_p3;
wire   [31:0] select_ln28_4_fu_538_p3;
wire   [31:0] select_ln28_6_fu_586_p3;
wire   [31:0] select_ln28_8_fu_634_p3;
wire   [31:0] select_ln28_10_fu_682_p3;
wire   [31:0] select_ln28_12_fu_730_p3;
wire   [31:0] select_ln28_14_fu_778_p3;
wire   [0:0] icmp_ln879_fu_433_p2;
wire   [0:0] xor_ln114_fu_404_p2;
wire   [0:0] trunc_ln791_fu_400_p1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 cycle_V = 8'd0;
#0 even_lane_z1_V_0 = 32'd0;
#0 even_lane_z1_V_1 = 32'd0;
#0 even_lane_z1_V_2 = 32'd0;
#0 even_lane_z1_V_3 = 32'd0;
#0 even_lane_z1_V_4 = 32'd0;
#0 even_lane_z1_V_5 = 32'd0;
#0 even_lane_z1_V_6 = 32'd0;
#0 even_lane_z1_V_7 = 32'd0;
end

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_0_ce0),
    .we0(delays_Array_V_0_we0),
    .d0(iqs_0_V_read),
    .q0(delays_Array_V_0_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_1_ce0),
    .we0(delays_Array_V_1_we0),
    .d0(iqs_0_V_read),
    .q0(delays_Array_V_1_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_2_ce0),
    .we0(delays_Array_V_2_we0),
    .d0(iqs_1_V_read),
    .q0(delays_Array_V_2_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_3_ce0),
    .we0(delays_Array_V_3_we0),
    .d0(iqs_1_V_read),
    .q0(delays_Array_V_3_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_4_ce0),
    .we0(delays_Array_V_4_we0),
    .d0(iqs_2_V_read),
    .q0(delays_Array_V_4_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_5_ce0),
    .we0(delays_Array_V_5_we0),
    .d0(iqs_2_V_read),
    .q0(delays_Array_V_5_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_6_ce0),
    .we0(delays_Array_V_6_we0),
    .d0(iqs_3_V_read),
    .q0(delays_Array_V_6_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_7_ce0),
    .we0(delays_Array_V_7_we0),
    .d0(iqs_3_V_read),
    .q0(delays_Array_V_7_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_8_ce0),
    .we0(delays_Array_V_8_we0),
    .d0(iqs_4_V_read),
    .q0(delays_Array_V_8_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_9_ce0),
    .we0(delays_Array_V_9_we0),
    .d0(iqs_4_V_read),
    .q0(delays_Array_V_9_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_10_ce0),
    .we0(delays_Array_V_10_we0),
    .d0(iqs_5_V_read),
    .q0(delays_Array_V_10_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_11_ce0),
    .we0(delays_Array_V_11_we0),
    .d0(iqs_5_V_read),
    .q0(delays_Array_V_11_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_12_ce0),
    .we0(delays_Array_V_12_we0),
    .d0(iqs_6_V_read),
    .q0(delays_Array_V_12_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_13_ce0),
    .we0(delays_Array_V_13_we0),
    .d0(iqs_6_V_read),
    .q0(delays_Array_V_13_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_14_ce0),
    .we0(delays_Array_V_14_we0),
    .d0(iqs_7_V_read),
    .q0(delays_Array_V_14_q0)
);

process_lanes_delbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delays_Array_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delays_Array_V_15_ce0),
    .we0(delays_Array_V_15_we0),
    .d0(iqs_7_V_read),
    .q0(delays_Array_V_15_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        cycle_V <= add_ln700_fu_816_p2;
        even_lane_z1_V_0 <= select_ln28_fu_420_p3;
        even_lane_z1_V_1 <= select_ln28_2_fu_490_p3;
        even_lane_z1_V_2 <= select_ln28_4_fu_538_p3;
        even_lane_z1_V_3 <= select_ln28_6_fu_586_p3;
        even_lane_z1_V_4 <= select_ln28_8_fu_634_p3;
        even_lane_z1_V_5 <= select_ln28_10_fu_682_p3;
        even_lane_z1_V_6 <= select_ln28_12_fu_730_p3;
        even_lane_z1_V_7 <= select_ln28_14_fu_778_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_0_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_0_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_10_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_10_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_11_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_11_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_12_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_12_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_13_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_13_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_14_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_14_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_15_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_15_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_1_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_1_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_2_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_2_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_3_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_3_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_4_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_4_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_5_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_5_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_6_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_6_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_7_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_7_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_8_ce0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_8_we0 = xor_ln114_fu_404_p2;
    end else begin
        delays_Array_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_9_ce0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delays_Array_V_9_we0 = trunc_ln791_fu_400_p1;
    end else begin
        delays_Array_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_0_TDATA_blk_n = lane_0_TREADY;
    end else begin
        lane_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_0_TVALID = 1'b1;
    end else begin
        lane_0_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_10_TDATA_blk_n = lane_10_TREADY;
    end else begin
        lane_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_10_TVALID = 1'b1;
    end else begin
        lane_10_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_11_TDATA_blk_n = lane_11_TREADY;
    end else begin
        lane_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_11_TVALID = 1'b1;
    end else begin
        lane_11_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_12_TDATA_blk_n = lane_12_TREADY;
    end else begin
        lane_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_12_TVALID = 1'b1;
    end else begin
        lane_12_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_13_TDATA_blk_n = lane_13_TREADY;
    end else begin
        lane_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_13_TVALID = 1'b1;
    end else begin
        lane_13_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_14_TDATA_blk_n = lane_14_TREADY;
    end else begin
        lane_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_14_TVALID = 1'b1;
    end else begin
        lane_14_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_15_TDATA_blk_n = lane_15_TREADY;
    end else begin
        lane_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_15_TVALID = 1'b1;
    end else begin
        lane_15_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_1_TDATA_blk_n = lane_1_TREADY;
    end else begin
        lane_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_1_TVALID = 1'b1;
    end else begin
        lane_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_2_TDATA_blk_n = lane_2_TREADY;
    end else begin
        lane_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_2_TVALID = 1'b1;
    end else begin
        lane_2_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_3_TDATA_blk_n = lane_3_TREADY;
    end else begin
        lane_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_3_TVALID = 1'b1;
    end else begin
        lane_3_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_4_TDATA_blk_n = lane_4_TREADY;
    end else begin
        lane_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_4_TVALID = 1'b1;
    end else begin
        lane_4_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_5_TDATA_blk_n = lane_5_TREADY;
    end else begin
        lane_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_5_TVALID = 1'b1;
    end else begin
        lane_5_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_6_TDATA_blk_n = lane_6_TREADY;
    end else begin
        lane_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_6_TVALID = 1'b1;
    end else begin
        lane_6_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_7_TDATA_blk_n = lane_7_TREADY;
    end else begin
        lane_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_7_TVALID = 1'b1;
    end else begin
        lane_7_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_8_TDATA_blk_n = lane_8_TREADY;
    end else begin
        lane_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_8_TVALID = 1'b1;
    end else begin
        lane_8_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_9_TDATA_blk_n = lane_9_TREADY;
    end else begin
        lane_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        lane_9_TVALID = 1'b1;
    end else begin
        lane_9_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_816_p2 = (8'd1 + cycle_V);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_io = ((lane_15_TREADY == 1'b0) | (lane_14_TREADY == 1'b0) | (lane_13_TREADY == 1'b0) | (lane_12_TREADY == 1'b0) | (lane_11_TREADY == 1'b0) | (lane_10_TREADY == 1'b0) | (lane_9_TREADY == 1'b0) | (lane_8_TREADY == 1'b0) | (lane_7_TREADY == 1'b0) | (lane_6_TREADY == 1'b0) | (lane_5_TREADY == 1'b0) | (lane_4_TREADY == 1'b0) | (lane_3_TREADY == 1'b0) | (lane_2_TREADY == 1'b0) | (lane_1_TREADY == 1'b0) | (lane_0_TREADY == 1'b0));
end

assign icmp_ln879_fu_433_p2 = ((cycle_V == 8'd255) ? 1'b1 : 1'b0);

assign lane_0_TDATA = even_lane_z1_V_0;

assign lane_0_TLAST = icmp_ln879_fu_433_p2;

assign lane_10_TDATA = even_lane_z1_V_5;

assign lane_10_TLAST = icmp_ln879_fu_433_p2;

assign lane_11_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_5_V_read : delays_Array_V_11_q0);

assign lane_11_TLAST = icmp_ln879_fu_433_p2;

assign lane_12_TDATA = even_lane_z1_V_6;

assign lane_12_TLAST = icmp_ln879_fu_433_p2;

assign lane_13_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_6_V_read : delays_Array_V_13_q0);

assign lane_13_TLAST = icmp_ln879_fu_433_p2;

assign lane_14_TDATA = even_lane_z1_V_7;

assign lane_14_TLAST = icmp_ln879_fu_433_p2;

assign lane_15_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_7_V_read : delays_Array_V_15_q0);

assign lane_15_TLAST = icmp_ln879_fu_433_p2;

assign lane_1_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_0_V_read : delays_Array_V_1_q0);

assign lane_1_TLAST = icmp_ln879_fu_433_p2;

assign lane_2_TDATA = even_lane_z1_V_1;

assign lane_2_TLAST = icmp_ln879_fu_433_p2;

assign lane_3_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_1_V_read : delays_Array_V_3_q0);

assign lane_3_TLAST = icmp_ln879_fu_433_p2;

assign lane_4_TDATA = even_lane_z1_V_2;

assign lane_4_TLAST = icmp_ln879_fu_433_p2;

assign lane_5_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_2_V_read : delays_Array_V_5_q0);

assign lane_5_TLAST = icmp_ln879_fu_433_p2;

assign lane_6_TDATA = even_lane_z1_V_3;

assign lane_6_TLAST = icmp_ln879_fu_433_p2;

assign lane_7_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_3_V_read : delays_Array_V_7_q0);

assign lane_7_TLAST = icmp_ln879_fu_433_p2;

assign lane_8_TDATA = even_lane_z1_V_4;

assign lane_8_TLAST = icmp_ln879_fu_433_p2;

assign lane_9_TDATA = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? iqs_4_V_read : delays_Array_V_9_q0);

assign lane_9_TLAST = icmp_ln879_fu_433_p2;

assign select_ln28_10_fu_682_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_10_q0 : iqs_5_V_read);

assign select_ln28_12_fu_730_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_12_q0 : iqs_6_V_read);

assign select_ln28_14_fu_778_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_14_q0 : iqs_7_V_read);

assign select_ln28_2_fu_490_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_2_q0 : iqs_1_V_read);

assign select_ln28_4_fu_538_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_4_q0 : iqs_2_V_read);

assign select_ln28_6_fu_586_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_6_q0 : iqs_3_V_read);

assign select_ln28_8_fu_634_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_8_q0 : iqs_4_V_read);

assign select_ln28_fu_420_p3 = ((trunc_ln791_fu_400_p1[0:0] === 1'b1) ? delays_Array_V_0_q0 : iqs_0_V_read);

assign trunc_ln791_fu_400_p1 = cycle_V[0:0];

assign xor_ln114_fu_404_p2 = (trunc_ln791_fu_400_p1 ^ 1'd1);

endmodule //process_lanes

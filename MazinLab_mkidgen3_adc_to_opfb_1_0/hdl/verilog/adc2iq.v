// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adc2iq (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        iin_data_TDATA,
        iin_data_TVALID,
        iin_data_TREADY,
        qin_data_TDATA,
        qin_data_TVALID,
        qin_data_TREADY,
        iq_V_data_0_V_din,
        iq_V_data_0_V_full_n,
        iq_V_data_0_V_write,
        iq_V_data_1_V_din,
        iq_V_data_1_V_full_n,
        iq_V_data_1_V_write,
        iq_V_data_2_V_din,
        iq_V_data_2_V_full_n,
        iq_V_data_2_V_write,
        iq_V_data_3_V_din,
        iq_V_data_3_V_full_n,
        iq_V_data_3_V_write,
        iq_V_data_4_V_din,
        iq_V_data_4_V_full_n,
        iq_V_data_4_V_write,
        iq_V_data_5_V_din,
        iq_V_data_5_V_full_n,
        iq_V_data_5_V_write,
        iq_V_data_6_V_din,
        iq_V_data_6_V_full_n,
        iq_V_data_6_V_write,
        iq_V_data_7_V_din,
        iq_V_data_7_V_full_n,
        iq_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] iin_data_TDATA;
input   iin_data_TVALID;
output   iin_data_TREADY;
input  [127:0] qin_data_TDATA;
input   qin_data_TVALID;
output   qin_data_TREADY;
output  [31:0] iq_V_data_0_V_din;
input   iq_V_data_0_V_full_n;
output   iq_V_data_0_V_write;
output  [31:0] iq_V_data_1_V_din;
input   iq_V_data_1_V_full_n;
output   iq_V_data_1_V_write;
output  [31:0] iq_V_data_2_V_din;
input   iq_V_data_2_V_full_n;
output   iq_V_data_2_V_write;
output  [31:0] iq_V_data_3_V_din;
input   iq_V_data_3_V_full_n;
output   iq_V_data_3_V_write;
output  [31:0] iq_V_data_4_V_din;
input   iq_V_data_4_V_full_n;
output   iq_V_data_4_V_write;
output  [31:0] iq_V_data_5_V_din;
input   iq_V_data_5_V_full_n;
output   iq_V_data_5_V_write;
output  [31:0] iq_V_data_6_V_din;
input   iq_V_data_6_V_full_n;
output   iq_V_data_6_V_write;
output  [31:0] iq_V_data_7_V_din;
input   iq_V_data_7_V_full_n;
output   iq_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg iin_data_TREADY;
reg qin_data_TREADY;
reg iq_V_data_0_V_write;
reg iq_V_data_1_V_write;
reg iq_V_data_2_V_write;
reg iq_V_data_3_V_write;
reg iq_V_data_4_V_write;
reg iq_V_data_5_V_write;
reg iq_V_data_6_V_write;
reg iq_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    iin_data_TDATA_blk_n;
reg    qin_data_TDATA_blk_n;
reg    ap_block_state1;
reg    ap_condition_99;
wire   [15:0] trunc_ln7_fu_186_p1;
wire   [15:0] trunc_ln6_fu_112_p1;
wire   [15:0] tmp_9_fu_190_p4;
wire   [15:0] tmp_1_fu_116_p4;
wire   [15:0] tmp_s_fu_200_p4;
wire   [15:0] tmp_2_fu_126_p4;
wire   [15:0] tmp_8_fu_210_p4;
wire   [15:0] tmp_3_fu_136_p4;
wire   [15:0] tmp_10_fu_220_p4;
wire   [15:0] tmp_4_fu_146_p4;
wire   [15:0] tmp_11_fu_230_p4;
wire   [15:0] tmp_5_fu_156_p4;
wire   [15:0] tmp_12_fu_240_p4;
wire   [15:0] tmp_6_fu_166_p4;
wire   [15:0] tmp_13_fu_250_p4;
wire   [15:0] tmp_7_fu_176_p4;
reg   [0:0] ap_NS_fsm;
wire    regslice_both_iin_data_U_apdone_blk;
wire   [127:0] iin_data_TDATA_int;
wire    iin_data_TVALID_int;
reg    iin_data_TREADY_int;
wire    regslice_both_iin_data_U_ack_in;
wire    regslice_both_qin_data_U_apdone_blk;
wire   [127:0] qin_data_TDATA_int;
wire    qin_data_TVALID_int;
reg    qin_data_TREADY_int;
wire    regslice_both_qin_data_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

regslice_both #(
    .DataWidth( 128 ))
regslice_both_iin_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(iin_data_TDATA),
    .vld_in(iin_data_TVALID),
    .ack_in(regslice_both_iin_data_U_ack_in),
    .data_out(iin_data_TDATA_int),
    .vld_out(iin_data_TVALID_int),
    .ack_out(iin_data_TREADY_int),
    .apdone_blk(regslice_both_iin_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qin_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(qin_data_TDATA),
    .vld_in(qin_data_TVALID),
    .ack_in(regslice_both_qin_data_U_ack_in),
    .data_out(qin_data_TDATA_int),
    .vld_out(qin_data_TVALID_int),
    .ack_out(qin_data_TREADY_int),
    .apdone_blk(regslice_both_qin_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iin_data_TDATA_blk_n = iin_data_TVALID_int;
    end else begin
        iin_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((iin_data_TVALID == 1'b1) & (regslice_both_iin_data_U_ack_in == 1'b1))) begin
        iin_data_TREADY = 1'b1;
    end else begin
        iin_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iin_data_TREADY_int = 1'b1;
    end else begin
        iin_data_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_0_V_write = 1'b1;
    end else begin
        iq_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_1_V_write = 1'b1;
    end else begin
        iq_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_2_V_write = 1'b1;
    end else begin
        iq_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_3_V_write = 1'b1;
    end else begin
        iq_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_4_V_write = 1'b1;
    end else begin
        iq_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_5_V_write = 1'b1;
    end else begin
        iq_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_6_V_write = 1'b1;
    end else begin
        iq_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_condition_99))) begin
        iq_V_data_7_V_write = 1'b1;
    end else begin
        iq_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qin_data_TDATA_blk_n = qin_data_TVALID_int;
    end else begin
        qin_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((qin_data_TVALID == 1'b1) & (regslice_both_qin_data_U_ack_in == 1'b1))) begin
        qin_data_TREADY = 1'b1;
    end else begin
        qin_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qin_data_TREADY_int = 1'b1;
    end else begin
        qin_data_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (qin_data_TVALID_int == 1'b0) | (iin_data_TVALID_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_99 = ((iq_V_data_7_V_full_n & iq_V_data_6_V_full_n & iq_V_data_5_V_full_n & iq_V_data_4_V_full_n & iq_V_data_3_V_full_n & iq_V_data_2_V_full_n & iq_V_data_1_V_full_n & iq_V_data_0_V_full_n) == 1'b1);
end

assign ap_ready = internal_ap_ready;

assign iq_V_data_0_V_din = {{trunc_ln7_fu_186_p1}, {trunc_ln6_fu_112_p1}};

assign iq_V_data_1_V_din = {{tmp_9_fu_190_p4}, {tmp_1_fu_116_p4}};

assign iq_V_data_2_V_din = {{tmp_s_fu_200_p4}, {tmp_2_fu_126_p4}};

assign iq_V_data_3_V_din = {{tmp_8_fu_210_p4}, {tmp_3_fu_136_p4}};

assign iq_V_data_4_V_din = {{tmp_10_fu_220_p4}, {tmp_4_fu_146_p4}};

assign iq_V_data_5_V_din = {{tmp_11_fu_230_p4}, {tmp_5_fu_156_p4}};

assign iq_V_data_6_V_din = {{tmp_12_fu_240_p4}, {tmp_6_fu_166_p4}};

assign iq_V_data_7_V_din = {{tmp_13_fu_250_p4}, {tmp_7_fu_176_p4}};

assign start_out = real_start;

assign tmp_10_fu_220_p4 = {{qin_data_TDATA_int[79:64]}};

assign tmp_11_fu_230_p4 = {{qin_data_TDATA_int[95:80]}};

assign tmp_12_fu_240_p4 = {{qin_data_TDATA_int[111:96]}};

assign tmp_13_fu_250_p4 = {{qin_data_TDATA_int[127:112]}};

assign tmp_1_fu_116_p4 = {{iin_data_TDATA_int[31:16]}};

assign tmp_2_fu_126_p4 = {{iin_data_TDATA_int[47:32]}};

assign tmp_3_fu_136_p4 = {{iin_data_TDATA_int[63:48]}};

assign tmp_4_fu_146_p4 = {{iin_data_TDATA_int[79:64]}};

assign tmp_5_fu_156_p4 = {{iin_data_TDATA_int[95:80]}};

assign tmp_6_fu_166_p4 = {{iin_data_TDATA_int[111:96]}};

assign tmp_7_fu_176_p4 = {{iin_data_TDATA_int[127:112]}};

assign tmp_8_fu_210_p4 = {{qin_data_TDATA_int[63:48]}};

assign tmp_9_fu_190_p4 = {{qin_data_TDATA_int[31:16]}};

assign tmp_s_fu_200_p4 = {{qin_data_TDATA_int[47:32]}};

assign trunc_ln6_fu_112_p1 = iin_data_TDATA_int[15:0];

assign trunc_ln7_fu_186_p1 = qin_data_TDATA_int[15:0];

endmodule //adc2iq

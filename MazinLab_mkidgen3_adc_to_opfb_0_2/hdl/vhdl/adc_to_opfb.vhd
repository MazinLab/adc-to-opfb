-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_to_opfb is
port (
    istream_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qstream_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    lane_data_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_8_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_9_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_10_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_11_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_12_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_13_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_14_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    lane_data_15_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    istream_data_TVALID : IN STD_LOGIC;
    istream_data_TREADY : OUT STD_LOGIC;
    qstream_data_TVALID : IN STD_LOGIC;
    qstream_data_TREADY : OUT STD_LOGIC;
    lane_data_0_TVALID : OUT STD_LOGIC;
    lane_data_0_TREADY : IN STD_LOGIC;
    lane_data_1_TVALID : OUT STD_LOGIC;
    lane_data_1_TREADY : IN STD_LOGIC;
    lane_data_2_TVALID : OUT STD_LOGIC;
    lane_data_2_TREADY : IN STD_LOGIC;
    lane_data_3_TVALID : OUT STD_LOGIC;
    lane_data_3_TREADY : IN STD_LOGIC;
    lane_data_4_TVALID : OUT STD_LOGIC;
    lane_data_4_TREADY : IN STD_LOGIC;
    lane_data_5_TVALID : OUT STD_LOGIC;
    lane_data_5_TREADY : IN STD_LOGIC;
    lane_data_6_TVALID : OUT STD_LOGIC;
    lane_data_6_TREADY : IN STD_LOGIC;
    lane_data_7_TVALID : OUT STD_LOGIC;
    lane_data_7_TREADY : IN STD_LOGIC;
    lane_data_8_TVALID : OUT STD_LOGIC;
    lane_data_8_TREADY : IN STD_LOGIC;
    lane_data_9_TVALID : OUT STD_LOGIC;
    lane_data_9_TREADY : IN STD_LOGIC;
    lane_data_10_TVALID : OUT STD_LOGIC;
    lane_data_10_TREADY : IN STD_LOGIC;
    lane_data_11_TVALID : OUT STD_LOGIC;
    lane_data_11_TREADY : IN STD_LOGIC;
    lane_data_12_TVALID : OUT STD_LOGIC;
    lane_data_12_TREADY : IN STD_LOGIC;
    lane_data_13_TVALID : OUT STD_LOGIC;
    lane_data_13_TREADY : IN STD_LOGIC;
    lane_data_14_TVALID : OUT STD_LOGIC;
    lane_data_14_TREADY : IN STD_LOGIC;
    lane_data_15_TVALID : OUT STD_LOGIC;
    lane_data_15_TREADY : IN STD_LOGIC );
end;


architecture behav of adc_to_opfb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adc_to_opfb,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.361000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3016,HLS_SYN_LUT=6999,HLS_VERSION=2019_2_1}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_istream_data_TREADY : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_qstream_data_TREADY : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl5_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_p_741_channel : STD_LOGIC;
    signal p_741_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_741_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_741_channel : STD_LOGIC;
    signal ap_channel_done_p_640_channel : STD_LOGIC;
    signal p_640_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_640_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_640_channel : STD_LOGIC;
    signal ap_channel_done_p_539_channel : STD_LOGIC;
    signal p_539_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_539_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_539_channel : STD_LOGIC;
    signal ap_channel_done_p_438_channel : STD_LOGIC;
    signal p_438_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_438_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_438_channel : STD_LOGIC;
    signal ap_channel_done_p_337_channel : STD_LOGIC;
    signal p_337_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_337_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_337_channel : STD_LOGIC;
    signal ap_channel_done_p_236_channel : STD_LOGIC;
    signal p_236_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_236_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_236_channel : STD_LOGIC;
    signal ap_channel_done_p_135_channel : STD_LOGIC;
    signal p_135_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_135_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_135_channel : STD_LOGIC;
    signal ap_channel_done_p_034_channel : STD_LOGIC;
    signal p_034_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_034_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_034_channel : STD_LOGIC;
    signal ap_channel_done_p_7_channel : STD_LOGIC;
    signal p_7_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_7_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_7_channel : STD_LOGIC;
    signal ap_channel_done_p_6_channel : STD_LOGIC;
    signal p_6_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_6_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_6_channel : STD_LOGIC;
    signal ap_channel_done_p_5_channel : STD_LOGIC;
    signal p_5_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_5_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_5_channel : STD_LOGIC;
    signal ap_channel_done_p_4_channel : STD_LOGIC;
    signal p_4_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_4_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_4_channel : STD_LOGIC;
    signal ap_channel_done_p_3_channel : STD_LOGIC;
    signal p_3_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_3_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_3_channel : STD_LOGIC;
    signal ap_channel_done_p_2_channel : STD_LOGIC;
    signal p_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_2_channel : STD_LOGIC;
    signal ap_channel_done_p_1_channel : STD_LOGIC;
    signal p_1_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_1_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_1_channel : STD_LOGIC;
    signal ap_channel_done_p_0_channel : STD_LOGIC;
    signal p_0_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_0_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_0_channel : STD_LOGIC;
    signal adc2iq_U0_ap_start : STD_LOGIC;
    signal adc2iq_U0_ap_done : STD_LOGIC;
    signal adc2iq_U0_ap_continue : STD_LOGIC;
    signal adc2iq_U0_ap_idle : STD_LOGIC;
    signal adc2iq_U0_ap_ready : STD_LOGIC;
    signal adc2iq_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal adc2iq_U0_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_iq_M_real_7_channel : STD_LOGIC;
    signal iq_M_real_7_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_7_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_7_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_6_channel : STD_LOGIC;
    signal iq_M_real_6_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_6_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_6_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_5_channel : STD_LOGIC;
    signal iq_M_real_5_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_5_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_5_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_4_channel : STD_LOGIC;
    signal iq_M_real_4_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_4_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_4_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_3_channel : STD_LOGIC;
    signal iq_M_real_3_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_3_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_3_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_2_channel : STD_LOGIC;
    signal iq_M_real_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_2_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_1_channel : STD_LOGIC;
    signal iq_M_real_1_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_1_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_1_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_real_0_channel : STD_LOGIC;
    signal iq_M_real_0_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_real_0_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_real_0_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_7_channel : STD_LOGIC;
    signal iq_M_imag_7_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_7_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_7_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_6_channel : STD_LOGIC;
    signal iq_M_imag_6_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_6_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_6_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_5_channel : STD_LOGIC;
    signal iq_M_imag_5_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_5_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_5_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_4_channel : STD_LOGIC;
    signal iq_M_imag_4_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_4_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_4_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_3_channel : STD_LOGIC;
    signal iq_M_imag_3_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_3_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_3_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_2_channel : STD_LOGIC;
    signal iq_M_imag_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_2_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_1_channel : STD_LOGIC;
    signal iq_M_imag_1_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_1_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_1_channel : STD_LOGIC;
    signal ap_channel_done_iq_M_imag_0_channel : STD_LOGIC;
    signal iq_M_imag_0_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_iq_M_imag_0_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_iq_M_imag_0_channel : STD_LOGIC;
    signal process_lanes_U0_ap_start : STD_LOGIC;
    signal process_lanes_U0_ap_done : STD_LOGIC;
    signal process_lanes_U0_ap_continue : STD_LOGIC;
    signal process_lanes_U0_ap_idle : STD_LOGIC;
    signal process_lanes_U0_ap_ready : STD_LOGIC;
    signal process_lanes_U0_lane_data_0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_0_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_1_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_2_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_2_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_3_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_3_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_4_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_4_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_5_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_5_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_6_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_6_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_7_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_7_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_8_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_8_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_9_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_9_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_10_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_10_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_11_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_11_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_12_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_12_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_13_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_13_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_14_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_14_TVALID : STD_LOGIC;
    signal process_lanes_U0_lane_data_15_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_lanes_U0_lane_data_15_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_0_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_channel_empty_n : STD_LOGIC;
    signal p_1_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_1_channel_empty_n : STD_LOGIC;
    signal p_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_2_channel_empty_n : STD_LOGIC;
    signal p_3_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_3_channel_empty_n : STD_LOGIC;
    signal p_4_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_channel_empty_n : STD_LOGIC;
    signal p_5_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_5_channel_empty_n : STD_LOGIC;
    signal p_6_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_6_channel_empty_n : STD_LOGIC;
    signal p_7_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_7_channel_empty_n : STD_LOGIC;
    signal p_034_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_034_channel_empty_n : STD_LOGIC;
    signal p_135_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_135_channel_empty_n : STD_LOGIC;
    signal p_236_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_236_channel_empty_n : STD_LOGIC;
    signal p_337_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_337_channel_empty_n : STD_LOGIC;
    signal p_438_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_438_channel_empty_n : STD_LOGIC;
    signal p_539_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_539_channel_empty_n : STD_LOGIC;
    signal p_640_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_640_channel_empty_n : STD_LOGIC;
    signal p_741_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_741_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_0_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_0_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_1_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_1_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_2_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_3_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_3_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_4_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_4_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_5_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_5_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_6_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_6_channel_empty_n : STD_LOGIC;
    signal iq_M_imag_7_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_imag_7_channel_empty_n : STD_LOGIC;
    signal iq_M_real_0_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_0_channel_empty_n : STD_LOGIC;
    signal iq_M_real_1_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_1_channel_empty_n : STD_LOGIC;
    signal iq_M_real_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_2_channel_empty_n : STD_LOGIC;
    signal iq_M_real_3_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_3_channel_empty_n : STD_LOGIC;
    signal iq_M_real_4_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_4_channel_empty_n : STD_LOGIC;
    signal iq_M_real_5_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_5_channel_empty_n : STD_LOGIC;
    signal iq_M_real_6_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_6_channel_empty_n : STD_LOGIC;
    signal iq_M_real_7_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_M_real_7_channel_empty_n : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl5_proc_U0_start_write : STD_LOGIC;
    signal adc2iq_U0_start_full_n : STD_LOGIC;
    signal adc2iq_U0_start_write : STD_LOGIC;
    signal process_lanes_U0_start_full_n : STD_LOGIC;
    signal process_lanes_U0_start_write : STD_LOGIC;

    component Block_codeRepl5_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        istream_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        istream_data_TVALID : IN STD_LOGIC;
        istream_data_TREADY : OUT STD_LOGIC;
        qstream_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        qstream_data_TVALID : IN STD_LOGIC;
        qstream_data_TREADY : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component adc2iq IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_lanes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lane_data_0_TREADY : IN STD_LOGIC;
        lane_data_1_TREADY : IN STD_LOGIC;
        lane_data_2_TREADY : IN STD_LOGIC;
        lane_data_3_TREADY : IN STD_LOGIC;
        lane_data_4_TREADY : IN STD_LOGIC;
        lane_data_5_TREADY : IN STD_LOGIC;
        lane_data_6_TREADY : IN STD_LOGIC;
        lane_data_7_TREADY : IN STD_LOGIC;
        lane_data_8_TREADY : IN STD_LOGIC;
        lane_data_9_TREADY : IN STD_LOGIC;
        lane_data_10_TREADY : IN STD_LOGIC;
        lane_data_11_TREADY : IN STD_LOGIC;
        lane_data_12_TREADY : IN STD_LOGIC;
        lane_data_13_TREADY : IN STD_LOGIC;
        lane_data_14_TREADY : IN STD_LOGIC;
        lane_data_15_TREADY : IN STD_LOGIC;
        lane_data_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_0_TVALID : OUT STD_LOGIC;
        lane_data_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_1_TVALID : OUT STD_LOGIC;
        lane_data_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_2_TVALID : OUT STD_LOGIC;
        lane_data_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_3_TVALID : OUT STD_LOGIC;
        lane_data_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_4_TVALID : OUT STD_LOGIC;
        lane_data_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_5_TVALID : OUT STD_LOGIC;
        lane_data_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_6_TVALID : OUT STD_LOGIC;
        lane_data_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_7_TVALID : OUT STD_LOGIC;
        lane_data_8_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_8_TVALID : OUT STD_LOGIC;
        lane_data_9_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_9_TVALID : OUT STD_LOGIC;
        lane_data_10_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_10_TVALID : OUT STD_LOGIC;
        lane_data_11_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_11_TVALID : OUT STD_LOGIC;
        lane_data_12_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_12_TVALID : OUT STD_LOGIC;
        lane_data_13_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_13_TVALID : OUT STD_LOGIC;
        lane_data_14_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_14_TVALID : OUT STD_LOGIC;
        lane_data_15_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        lane_data_15_TVALID : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_codeRepl5_proc_U0 : component Block_codeRepl5_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl5_proc_U0_ap_start,
        ap_done => Block_codeRepl5_proc_U0_ap_done,
        ap_continue => Block_codeRepl5_proc_U0_ap_continue,
        ap_idle => Block_codeRepl5_proc_U0_ap_idle,
        ap_ready => Block_codeRepl5_proc_U0_ap_ready,
        istream_data_TDATA => istream_data_TDATA,
        istream_data_TVALID => istream_data_TVALID,
        istream_data_TREADY => Block_codeRepl5_proc_U0_istream_data_TREADY,
        qstream_data_TDATA => qstream_data_TDATA,
        qstream_data_TVALID => qstream_data_TVALID,
        qstream_data_TREADY => Block_codeRepl5_proc_U0_qstream_data_TREADY,
        ap_return_0 => Block_codeRepl5_proc_U0_ap_return_0,
        ap_return_1 => Block_codeRepl5_proc_U0_ap_return_1,
        ap_return_2 => Block_codeRepl5_proc_U0_ap_return_2,
        ap_return_3 => Block_codeRepl5_proc_U0_ap_return_3,
        ap_return_4 => Block_codeRepl5_proc_U0_ap_return_4,
        ap_return_5 => Block_codeRepl5_proc_U0_ap_return_5,
        ap_return_6 => Block_codeRepl5_proc_U0_ap_return_6,
        ap_return_7 => Block_codeRepl5_proc_U0_ap_return_7,
        ap_return_8 => Block_codeRepl5_proc_U0_ap_return_8,
        ap_return_9 => Block_codeRepl5_proc_U0_ap_return_9,
        ap_return_10 => Block_codeRepl5_proc_U0_ap_return_10,
        ap_return_11 => Block_codeRepl5_proc_U0_ap_return_11,
        ap_return_12 => Block_codeRepl5_proc_U0_ap_return_12,
        ap_return_13 => Block_codeRepl5_proc_U0_ap_return_13,
        ap_return_14 => Block_codeRepl5_proc_U0_ap_return_14,
        ap_return_15 => Block_codeRepl5_proc_U0_ap_return_15);

    adc2iq_U0 : component adc2iq
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => adc2iq_U0_ap_start,
        ap_done => adc2iq_U0_ap_done,
        ap_continue => adc2iq_U0_ap_continue,
        ap_idle => adc2iq_U0_ap_idle,
        ap_ready => adc2iq_U0_ap_ready,
        p_read => p_0_channel_dout,
        p_read1 => p_1_channel_dout,
        p_read2 => p_2_channel_dout,
        p_read3 => p_3_channel_dout,
        p_read4 => p_4_channel_dout,
        p_read5 => p_5_channel_dout,
        p_read6 => p_6_channel_dout,
        p_read7 => p_7_channel_dout,
        p_read8 => p_034_channel_dout,
        p_read9 => p_135_channel_dout,
        p_read10 => p_236_channel_dout,
        p_read11 => p_337_channel_dout,
        p_read12 => p_438_channel_dout,
        p_read13 => p_539_channel_dout,
        p_read14 => p_640_channel_dout,
        p_read15 => p_741_channel_dout,
        ap_return_0 => adc2iq_U0_ap_return_0,
        ap_return_1 => adc2iq_U0_ap_return_1,
        ap_return_2 => adc2iq_U0_ap_return_2,
        ap_return_3 => adc2iq_U0_ap_return_3,
        ap_return_4 => adc2iq_U0_ap_return_4,
        ap_return_5 => adc2iq_U0_ap_return_5,
        ap_return_6 => adc2iq_U0_ap_return_6,
        ap_return_7 => adc2iq_U0_ap_return_7,
        ap_return_8 => adc2iq_U0_ap_return_8,
        ap_return_9 => adc2iq_U0_ap_return_9,
        ap_return_10 => adc2iq_U0_ap_return_10,
        ap_return_11 => adc2iq_U0_ap_return_11,
        ap_return_12 => adc2iq_U0_ap_return_12,
        ap_return_13 => adc2iq_U0_ap_return_13,
        ap_return_14 => adc2iq_U0_ap_return_14,
        ap_return_15 => adc2iq_U0_ap_return_15);

    process_lanes_U0 : component process_lanes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => process_lanes_U0_ap_start,
        ap_done => process_lanes_U0_ap_done,
        ap_continue => process_lanes_U0_ap_continue,
        ap_idle => process_lanes_U0_ap_idle,
        ap_ready => process_lanes_U0_ap_ready,
        lane_data_0_TREADY => lane_data_0_TREADY,
        lane_data_1_TREADY => lane_data_1_TREADY,
        lane_data_2_TREADY => lane_data_2_TREADY,
        lane_data_3_TREADY => lane_data_3_TREADY,
        lane_data_4_TREADY => lane_data_4_TREADY,
        lane_data_5_TREADY => lane_data_5_TREADY,
        lane_data_6_TREADY => lane_data_6_TREADY,
        lane_data_7_TREADY => lane_data_7_TREADY,
        lane_data_8_TREADY => lane_data_8_TREADY,
        lane_data_9_TREADY => lane_data_9_TREADY,
        lane_data_10_TREADY => lane_data_10_TREADY,
        lane_data_11_TREADY => lane_data_11_TREADY,
        lane_data_12_TREADY => lane_data_12_TREADY,
        lane_data_13_TREADY => lane_data_13_TREADY,
        lane_data_14_TREADY => lane_data_14_TREADY,
        lane_data_15_TREADY => lane_data_15_TREADY,
        lane_data_0_TDATA => process_lanes_U0_lane_data_0_TDATA,
        lane_data_0_TVALID => process_lanes_U0_lane_data_0_TVALID,
        lane_data_1_TDATA => process_lanes_U0_lane_data_1_TDATA,
        lane_data_1_TVALID => process_lanes_U0_lane_data_1_TVALID,
        lane_data_2_TDATA => process_lanes_U0_lane_data_2_TDATA,
        lane_data_2_TVALID => process_lanes_U0_lane_data_2_TVALID,
        lane_data_3_TDATA => process_lanes_U0_lane_data_3_TDATA,
        lane_data_3_TVALID => process_lanes_U0_lane_data_3_TVALID,
        lane_data_4_TDATA => process_lanes_U0_lane_data_4_TDATA,
        lane_data_4_TVALID => process_lanes_U0_lane_data_4_TVALID,
        lane_data_5_TDATA => process_lanes_U0_lane_data_5_TDATA,
        lane_data_5_TVALID => process_lanes_U0_lane_data_5_TVALID,
        lane_data_6_TDATA => process_lanes_U0_lane_data_6_TDATA,
        lane_data_6_TVALID => process_lanes_U0_lane_data_6_TVALID,
        lane_data_7_TDATA => process_lanes_U0_lane_data_7_TDATA,
        lane_data_7_TVALID => process_lanes_U0_lane_data_7_TVALID,
        lane_data_8_TDATA => process_lanes_U0_lane_data_8_TDATA,
        lane_data_8_TVALID => process_lanes_U0_lane_data_8_TVALID,
        lane_data_9_TDATA => process_lanes_U0_lane_data_9_TDATA,
        lane_data_9_TVALID => process_lanes_U0_lane_data_9_TVALID,
        lane_data_10_TDATA => process_lanes_U0_lane_data_10_TDATA,
        lane_data_10_TVALID => process_lanes_U0_lane_data_10_TVALID,
        lane_data_11_TDATA => process_lanes_U0_lane_data_11_TDATA,
        lane_data_11_TVALID => process_lanes_U0_lane_data_11_TVALID,
        lane_data_12_TDATA => process_lanes_U0_lane_data_12_TDATA,
        lane_data_12_TVALID => process_lanes_U0_lane_data_12_TVALID,
        lane_data_13_TDATA => process_lanes_U0_lane_data_13_TDATA,
        lane_data_13_TVALID => process_lanes_U0_lane_data_13_TVALID,
        lane_data_14_TDATA => process_lanes_U0_lane_data_14_TDATA,
        lane_data_14_TVALID => process_lanes_U0_lane_data_14_TVALID,
        lane_data_15_TDATA => process_lanes_U0_lane_data_15_TDATA,
        lane_data_15_TVALID => process_lanes_U0_lane_data_15_TVALID,
        p_read => iq_M_imag_0_channel_dout,
        p_read1 => iq_M_imag_1_channel_dout,
        p_read2 => iq_M_imag_2_channel_dout,
        p_read3 => iq_M_imag_3_channel_dout,
        p_read4 => iq_M_imag_4_channel_dout,
        p_read5 => iq_M_imag_5_channel_dout,
        p_read6 => iq_M_imag_6_channel_dout,
        p_read7 => iq_M_imag_7_channel_dout,
        p_read8 => iq_M_real_0_channel_dout,
        p_read9 => iq_M_real_1_channel_dout,
        p_read10 => iq_M_real_2_channel_dout,
        p_read11 => iq_M_real_3_channel_dout,
        p_read12 => iq_M_real_4_channel_dout,
        p_read13 => iq_M_real_5_channel_dout,
        p_read14 => iq_M_real_6_channel_dout,
        p_read15 => iq_M_real_7_channel_dout);

    p_0_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_0,
        if_full_n => p_0_channel_full_n,
        if_write => ap_channel_done_p_0_channel,
        if_dout => p_0_channel_dout,
        if_empty_n => p_0_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_1_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_1,
        if_full_n => p_1_channel_full_n,
        if_write => ap_channel_done_p_1_channel,
        if_dout => p_1_channel_dout,
        if_empty_n => p_1_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_2_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_2,
        if_full_n => p_2_channel_full_n,
        if_write => ap_channel_done_p_2_channel,
        if_dout => p_2_channel_dout,
        if_empty_n => p_2_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_3_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_3,
        if_full_n => p_3_channel_full_n,
        if_write => ap_channel_done_p_3_channel,
        if_dout => p_3_channel_dout,
        if_empty_n => p_3_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_4_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_4,
        if_full_n => p_4_channel_full_n,
        if_write => ap_channel_done_p_4_channel,
        if_dout => p_4_channel_dout,
        if_empty_n => p_4_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_5_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_5,
        if_full_n => p_5_channel_full_n,
        if_write => ap_channel_done_p_5_channel,
        if_dout => p_5_channel_dout,
        if_empty_n => p_5_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_6_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_6,
        if_full_n => p_6_channel_full_n,
        if_write => ap_channel_done_p_6_channel,
        if_dout => p_6_channel_dout,
        if_empty_n => p_6_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_7_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_7,
        if_full_n => p_7_channel_full_n,
        if_write => ap_channel_done_p_7_channel,
        if_dout => p_7_channel_dout,
        if_empty_n => p_7_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_034_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_8,
        if_full_n => p_034_channel_full_n,
        if_write => ap_channel_done_p_034_channel,
        if_dout => p_034_channel_dout,
        if_empty_n => p_034_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_135_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_9,
        if_full_n => p_135_channel_full_n,
        if_write => ap_channel_done_p_135_channel,
        if_dout => p_135_channel_dout,
        if_empty_n => p_135_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_236_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_10,
        if_full_n => p_236_channel_full_n,
        if_write => ap_channel_done_p_236_channel,
        if_dout => p_236_channel_dout,
        if_empty_n => p_236_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_337_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_11,
        if_full_n => p_337_channel_full_n,
        if_write => ap_channel_done_p_337_channel,
        if_dout => p_337_channel_dout,
        if_empty_n => p_337_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_438_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_12,
        if_full_n => p_438_channel_full_n,
        if_write => ap_channel_done_p_438_channel,
        if_dout => p_438_channel_dout,
        if_empty_n => p_438_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_539_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_13,
        if_full_n => p_539_channel_full_n,
        if_write => ap_channel_done_p_539_channel,
        if_dout => p_539_channel_dout,
        if_empty_n => p_539_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_640_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_14,
        if_full_n => p_640_channel_full_n,
        if_write => ap_channel_done_p_640_channel,
        if_dout => p_640_channel_dout,
        if_empty_n => p_640_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    p_741_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl5_proc_U0_ap_return_15,
        if_full_n => p_741_channel_full_n,
        if_write => ap_channel_done_p_741_channel,
        if_dout => p_741_channel_dout,
        if_empty_n => p_741_channel_empty_n,
        if_read => adc2iq_U0_ap_ready);

    iq_M_imag_0_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_0,
        if_full_n => iq_M_imag_0_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_0_channel,
        if_dout => iq_M_imag_0_channel_dout,
        if_empty_n => iq_M_imag_0_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_1_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_1,
        if_full_n => iq_M_imag_1_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_1_channel,
        if_dout => iq_M_imag_1_channel_dout,
        if_empty_n => iq_M_imag_1_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_2_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_2,
        if_full_n => iq_M_imag_2_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_2_channel,
        if_dout => iq_M_imag_2_channel_dout,
        if_empty_n => iq_M_imag_2_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_3_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_3,
        if_full_n => iq_M_imag_3_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_3_channel,
        if_dout => iq_M_imag_3_channel_dout,
        if_empty_n => iq_M_imag_3_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_4_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_4,
        if_full_n => iq_M_imag_4_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_4_channel,
        if_dout => iq_M_imag_4_channel_dout,
        if_empty_n => iq_M_imag_4_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_5_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_5,
        if_full_n => iq_M_imag_5_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_5_channel,
        if_dout => iq_M_imag_5_channel_dout,
        if_empty_n => iq_M_imag_5_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_6_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_6,
        if_full_n => iq_M_imag_6_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_6_channel,
        if_dout => iq_M_imag_6_channel_dout,
        if_empty_n => iq_M_imag_6_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_imag_7_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_7,
        if_full_n => iq_M_imag_7_channel_full_n,
        if_write => ap_channel_done_iq_M_imag_7_channel,
        if_dout => iq_M_imag_7_channel_dout,
        if_empty_n => iq_M_imag_7_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_0_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_8,
        if_full_n => iq_M_real_0_channel_full_n,
        if_write => ap_channel_done_iq_M_real_0_channel,
        if_dout => iq_M_real_0_channel_dout,
        if_empty_n => iq_M_real_0_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_1_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_9,
        if_full_n => iq_M_real_1_channel_full_n,
        if_write => ap_channel_done_iq_M_real_1_channel,
        if_dout => iq_M_real_1_channel_dout,
        if_empty_n => iq_M_real_1_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_2_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_10,
        if_full_n => iq_M_real_2_channel_full_n,
        if_write => ap_channel_done_iq_M_real_2_channel,
        if_dout => iq_M_real_2_channel_dout,
        if_empty_n => iq_M_real_2_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_3_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_11,
        if_full_n => iq_M_real_3_channel_full_n,
        if_write => ap_channel_done_iq_M_real_3_channel,
        if_dout => iq_M_real_3_channel_dout,
        if_empty_n => iq_M_real_3_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_4_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_12,
        if_full_n => iq_M_real_4_channel_full_n,
        if_write => ap_channel_done_iq_M_real_4_channel,
        if_dout => iq_M_real_4_channel_dout,
        if_empty_n => iq_M_real_4_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_5_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_13,
        if_full_n => iq_M_real_5_channel_full_n,
        if_write => ap_channel_done_iq_M_real_5_channel,
        if_dout => iq_M_real_5_channel_dout,
        if_empty_n => iq_M_real_5_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_6_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_14,
        if_full_n => iq_M_real_6_channel_full_n,
        if_write => ap_channel_done_iq_M_real_6_channel,
        if_dout => iq_M_real_6_channel_dout,
        if_empty_n => iq_M_real_6_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);

    iq_M_real_7_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adc2iq_U0_ap_return_15,
        if_full_n => iq_M_real_7_channel_full_n,
        if_write => ap_channel_done_iq_M_real_7_channel,
        if_dout => iq_M_real_7_channel_dout,
        if_empty_n => iq_M_real_7_channel_empty_n,
        if_read => process_lanes_U0_ap_ready);





    ap_sync_reg_channel_write_iq_M_imag_0_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_0_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_0_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_0_channel <= ap_sync_channel_write_iq_M_imag_0_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_1_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_1_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_1_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_1_channel <= ap_sync_channel_write_iq_M_imag_1_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_2_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_2_channel <= ap_sync_channel_write_iq_M_imag_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_3_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_3_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_3_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_3_channel <= ap_sync_channel_write_iq_M_imag_3_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_4_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_4_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_4_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_4_channel <= ap_sync_channel_write_iq_M_imag_4_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_5_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_5_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_5_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_5_channel <= ap_sync_channel_write_iq_M_imag_5_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_6_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_6_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_6_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_6_channel <= ap_sync_channel_write_iq_M_imag_6_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_imag_7_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_imag_7_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_imag_7_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_imag_7_channel <= ap_sync_channel_write_iq_M_imag_7_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_0_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_0_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_0_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_0_channel <= ap_sync_channel_write_iq_M_real_0_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_1_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_1_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_1_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_1_channel <= ap_sync_channel_write_iq_M_real_1_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_2_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_2_channel <= ap_sync_channel_write_iq_M_real_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_3_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_3_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_3_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_3_channel <= ap_sync_channel_write_iq_M_real_3_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_4_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_4_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_4_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_4_channel <= ap_sync_channel_write_iq_M_real_4_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_5_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_5_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_5_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_5_channel <= ap_sync_channel_write_iq_M_real_5_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_6_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_6_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_6_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_6_channel <= ap_sync_channel_write_iq_M_real_6_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_iq_M_real_7_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_iq_M_real_7_channel <= ap_const_logic_0;
            else
                if (((adc2iq_U0_ap_done and adc2iq_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_iq_M_real_7_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_iq_M_real_7_channel <= ap_sync_channel_write_iq_M_real_7_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_034_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_034_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_034_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_034_channel <= ap_sync_channel_write_p_034_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_0_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_0_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_0_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_0_channel <= ap_sync_channel_write_p_0_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_135_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_135_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_135_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_135_channel <= ap_sync_channel_write_p_135_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_1_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_1_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_1_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_1_channel <= ap_sync_channel_write_p_1_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_236_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_236_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_236_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_236_channel <= ap_sync_channel_write_p_236_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_2_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_2_channel <= ap_sync_channel_write_p_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_337_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_337_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_337_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_337_channel <= ap_sync_channel_write_p_337_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_3_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_3_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_3_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_3_channel <= ap_sync_channel_write_p_3_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_438_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_438_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_438_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_438_channel <= ap_sync_channel_write_p_438_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_4_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_4_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_4_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_4_channel <= ap_sync_channel_write_p_4_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_539_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_539_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_539_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_539_channel <= ap_sync_channel_write_p_539_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_5_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_5_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_5_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_5_channel <= ap_sync_channel_write_p_5_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_640_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_640_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_640_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_640_channel <= ap_sync_channel_write_p_640_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_6_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_6_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_6_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_6_channel <= ap_sync_channel_write_p_6_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_741_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_741_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_741_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_741_channel <= ap_sync_channel_write_p_741_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_7_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_p_7_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl5_proc_U0_ap_done and Block_codeRepl5_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_7_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_7_channel <= ap_sync_channel_write_p_7_channel;
                end if; 
            end if;
        end if;
    end process;

    Block_codeRepl5_proc_U0_ap_continue <= (ap_sync_channel_write_p_7_channel and ap_sync_channel_write_p_741_channel and ap_sync_channel_write_p_6_channel and ap_sync_channel_write_p_640_channel and ap_sync_channel_write_p_5_channel and ap_sync_channel_write_p_539_channel and ap_sync_channel_write_p_4_channel and ap_sync_channel_write_p_438_channel and ap_sync_channel_write_p_3_channel and ap_sync_channel_write_p_337_channel and ap_sync_channel_write_p_2_channel and ap_sync_channel_write_p_236_channel and ap_sync_channel_write_p_1_channel and ap_sync_channel_write_p_135_channel and ap_sync_channel_write_p_0_channel and ap_sync_channel_write_p_034_channel);
    Block_codeRepl5_proc_U0_ap_start <= ap_const_logic_1;
    Block_codeRepl5_proc_U0_start_full_n <= ap_const_logic_1;
    Block_codeRepl5_proc_U0_start_write <= ap_const_logic_0;
    adc2iq_U0_ap_continue <= (ap_sync_channel_write_iq_M_real_7_channel and ap_sync_channel_write_iq_M_real_6_channel and ap_sync_channel_write_iq_M_real_5_channel and ap_sync_channel_write_iq_M_real_4_channel and ap_sync_channel_write_iq_M_real_3_channel and ap_sync_channel_write_iq_M_real_2_channel and ap_sync_channel_write_iq_M_real_1_channel and ap_sync_channel_write_iq_M_real_0_channel and ap_sync_channel_write_iq_M_imag_7_channel and ap_sync_channel_write_iq_M_imag_6_channel and ap_sync_channel_write_iq_M_imag_5_channel and ap_sync_channel_write_iq_M_imag_4_channel and ap_sync_channel_write_iq_M_imag_3_channel and ap_sync_channel_write_iq_M_imag_2_channel and ap_sync_channel_write_iq_M_imag_1_channel and ap_sync_channel_write_iq_M_imag_0_channel);
    adc2iq_U0_ap_start <= (p_7_channel_empty_n and p_741_channel_empty_n and p_6_channel_empty_n and p_640_channel_empty_n and p_5_channel_empty_n and p_539_channel_empty_n and p_4_channel_empty_n and p_438_channel_empty_n and p_3_channel_empty_n and p_337_channel_empty_n and p_2_channel_empty_n and p_236_channel_empty_n and p_1_channel_empty_n and p_135_channel_empty_n and p_0_channel_empty_n and p_034_channel_empty_n);
    adc2iq_U0_start_full_n <= ap_const_logic_1;
    adc2iq_U0_start_write <= ap_const_logic_0;
    ap_channel_done_iq_M_imag_0_channel <= ((ap_sync_reg_channel_write_iq_M_imag_0_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_1_channel <= ((ap_sync_reg_channel_write_iq_M_imag_1_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_2_channel <= ((ap_sync_reg_channel_write_iq_M_imag_2_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_3_channel <= ((ap_sync_reg_channel_write_iq_M_imag_3_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_4_channel <= ((ap_sync_reg_channel_write_iq_M_imag_4_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_5_channel <= ((ap_sync_reg_channel_write_iq_M_imag_5_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_6_channel <= ((ap_sync_reg_channel_write_iq_M_imag_6_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_imag_7_channel <= ((ap_sync_reg_channel_write_iq_M_imag_7_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_0_channel <= ((ap_sync_reg_channel_write_iq_M_real_0_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_1_channel <= ((ap_sync_reg_channel_write_iq_M_real_1_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_2_channel <= ((ap_sync_reg_channel_write_iq_M_real_2_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_3_channel <= ((ap_sync_reg_channel_write_iq_M_real_3_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_4_channel <= ((ap_sync_reg_channel_write_iq_M_real_4_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_5_channel <= ((ap_sync_reg_channel_write_iq_M_real_5_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_6_channel <= ((ap_sync_reg_channel_write_iq_M_real_6_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_iq_M_real_7_channel <= ((ap_sync_reg_channel_write_iq_M_real_7_channel xor ap_const_logic_1) and adc2iq_U0_ap_done);
    ap_channel_done_p_034_channel <= ((ap_sync_reg_channel_write_p_034_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_0_channel <= ((ap_sync_reg_channel_write_p_0_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_135_channel <= ((ap_sync_reg_channel_write_p_135_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_1_channel <= ((ap_sync_reg_channel_write_p_1_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_236_channel <= ((ap_sync_reg_channel_write_p_236_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_2_channel <= ((ap_sync_reg_channel_write_p_2_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_337_channel <= ((ap_sync_reg_channel_write_p_337_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_3_channel <= ((ap_sync_reg_channel_write_p_3_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_438_channel <= ((ap_sync_reg_channel_write_p_438_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_4_channel <= ((ap_sync_reg_channel_write_p_4_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_539_channel <= ((ap_sync_reg_channel_write_p_539_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_5_channel <= ((ap_sync_reg_channel_write_p_5_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_640_channel <= ((ap_sync_reg_channel_write_p_640_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_6_channel <= ((ap_sync_reg_channel_write_p_6_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_741_channel <= ((ap_sync_reg_channel_write_p_741_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);
    ap_channel_done_p_7_channel <= ((ap_sync_reg_channel_write_p_7_channel xor ap_const_logic_1) and Block_codeRepl5_proc_U0_ap_done);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_iq_M_imag_0_channel <= ((iq_M_imag_0_channel_full_n and ap_channel_done_iq_M_imag_0_channel) or ap_sync_reg_channel_write_iq_M_imag_0_channel);
    ap_sync_channel_write_iq_M_imag_1_channel <= ((iq_M_imag_1_channel_full_n and ap_channel_done_iq_M_imag_1_channel) or ap_sync_reg_channel_write_iq_M_imag_1_channel);
    ap_sync_channel_write_iq_M_imag_2_channel <= ((iq_M_imag_2_channel_full_n and ap_channel_done_iq_M_imag_2_channel) or ap_sync_reg_channel_write_iq_M_imag_2_channel);
    ap_sync_channel_write_iq_M_imag_3_channel <= ((iq_M_imag_3_channel_full_n and ap_channel_done_iq_M_imag_3_channel) or ap_sync_reg_channel_write_iq_M_imag_3_channel);
    ap_sync_channel_write_iq_M_imag_4_channel <= ((iq_M_imag_4_channel_full_n and ap_channel_done_iq_M_imag_4_channel) or ap_sync_reg_channel_write_iq_M_imag_4_channel);
    ap_sync_channel_write_iq_M_imag_5_channel <= ((iq_M_imag_5_channel_full_n and ap_channel_done_iq_M_imag_5_channel) or ap_sync_reg_channel_write_iq_M_imag_5_channel);
    ap_sync_channel_write_iq_M_imag_6_channel <= ((iq_M_imag_6_channel_full_n and ap_channel_done_iq_M_imag_6_channel) or ap_sync_reg_channel_write_iq_M_imag_6_channel);
    ap_sync_channel_write_iq_M_imag_7_channel <= ((iq_M_imag_7_channel_full_n and ap_channel_done_iq_M_imag_7_channel) or ap_sync_reg_channel_write_iq_M_imag_7_channel);
    ap_sync_channel_write_iq_M_real_0_channel <= ((iq_M_real_0_channel_full_n and ap_channel_done_iq_M_real_0_channel) or ap_sync_reg_channel_write_iq_M_real_0_channel);
    ap_sync_channel_write_iq_M_real_1_channel <= ((iq_M_real_1_channel_full_n and ap_channel_done_iq_M_real_1_channel) or ap_sync_reg_channel_write_iq_M_real_1_channel);
    ap_sync_channel_write_iq_M_real_2_channel <= ((iq_M_real_2_channel_full_n and ap_channel_done_iq_M_real_2_channel) or ap_sync_reg_channel_write_iq_M_real_2_channel);
    ap_sync_channel_write_iq_M_real_3_channel <= ((iq_M_real_3_channel_full_n and ap_channel_done_iq_M_real_3_channel) or ap_sync_reg_channel_write_iq_M_real_3_channel);
    ap_sync_channel_write_iq_M_real_4_channel <= ((iq_M_real_4_channel_full_n and ap_channel_done_iq_M_real_4_channel) or ap_sync_reg_channel_write_iq_M_real_4_channel);
    ap_sync_channel_write_iq_M_real_5_channel <= ((iq_M_real_5_channel_full_n and ap_channel_done_iq_M_real_5_channel) or ap_sync_reg_channel_write_iq_M_real_5_channel);
    ap_sync_channel_write_iq_M_real_6_channel <= ((iq_M_real_6_channel_full_n and ap_channel_done_iq_M_real_6_channel) or ap_sync_reg_channel_write_iq_M_real_6_channel);
    ap_sync_channel_write_iq_M_real_7_channel <= ((iq_M_real_7_channel_full_n and ap_channel_done_iq_M_real_7_channel) or ap_sync_reg_channel_write_iq_M_real_7_channel);
    ap_sync_channel_write_p_034_channel <= ((p_034_channel_full_n and ap_channel_done_p_034_channel) or ap_sync_reg_channel_write_p_034_channel);
    ap_sync_channel_write_p_0_channel <= ((p_0_channel_full_n and ap_channel_done_p_0_channel) or ap_sync_reg_channel_write_p_0_channel);
    ap_sync_channel_write_p_135_channel <= ((p_135_channel_full_n and ap_channel_done_p_135_channel) or ap_sync_reg_channel_write_p_135_channel);
    ap_sync_channel_write_p_1_channel <= ((p_1_channel_full_n and ap_channel_done_p_1_channel) or ap_sync_reg_channel_write_p_1_channel);
    ap_sync_channel_write_p_236_channel <= ((p_236_channel_full_n and ap_channel_done_p_236_channel) or ap_sync_reg_channel_write_p_236_channel);
    ap_sync_channel_write_p_2_channel <= ((p_2_channel_full_n and ap_channel_done_p_2_channel) or ap_sync_reg_channel_write_p_2_channel);
    ap_sync_channel_write_p_337_channel <= ((p_337_channel_full_n and ap_channel_done_p_337_channel) or ap_sync_reg_channel_write_p_337_channel);
    ap_sync_channel_write_p_3_channel <= ((p_3_channel_full_n and ap_channel_done_p_3_channel) or ap_sync_reg_channel_write_p_3_channel);
    ap_sync_channel_write_p_438_channel <= ((p_438_channel_full_n and ap_channel_done_p_438_channel) or ap_sync_reg_channel_write_p_438_channel);
    ap_sync_channel_write_p_4_channel <= ((p_4_channel_full_n and ap_channel_done_p_4_channel) or ap_sync_reg_channel_write_p_4_channel);
    ap_sync_channel_write_p_539_channel <= ((p_539_channel_full_n and ap_channel_done_p_539_channel) or ap_sync_reg_channel_write_p_539_channel);
    ap_sync_channel_write_p_5_channel <= ((p_5_channel_full_n and ap_channel_done_p_5_channel) or ap_sync_reg_channel_write_p_5_channel);
    ap_sync_channel_write_p_640_channel <= ((p_640_channel_full_n and ap_channel_done_p_640_channel) or ap_sync_reg_channel_write_p_640_channel);
    ap_sync_channel_write_p_6_channel <= ((p_6_channel_full_n and ap_channel_done_p_6_channel) or ap_sync_reg_channel_write_p_6_channel);
    ap_sync_channel_write_p_741_channel <= ((p_741_channel_full_n and ap_channel_done_p_741_channel) or ap_sync_reg_channel_write_p_741_channel);
    ap_sync_channel_write_p_7_channel <= ((p_7_channel_full_n and ap_channel_done_p_7_channel) or ap_sync_reg_channel_write_p_7_channel);
    ap_sync_continue <= ap_const_logic_0;
    istream_data_TREADY <= Block_codeRepl5_proc_U0_istream_data_TREADY;
    lane_data_0_TDATA <= process_lanes_U0_lane_data_0_TDATA;
    lane_data_0_TVALID <= process_lanes_U0_lane_data_0_TVALID;
    lane_data_10_TDATA <= process_lanes_U0_lane_data_10_TDATA;
    lane_data_10_TVALID <= process_lanes_U0_lane_data_10_TVALID;
    lane_data_11_TDATA <= process_lanes_U0_lane_data_11_TDATA;
    lane_data_11_TVALID <= process_lanes_U0_lane_data_11_TVALID;
    lane_data_12_TDATA <= process_lanes_U0_lane_data_12_TDATA;
    lane_data_12_TVALID <= process_lanes_U0_lane_data_12_TVALID;
    lane_data_13_TDATA <= process_lanes_U0_lane_data_13_TDATA;
    lane_data_13_TVALID <= process_lanes_U0_lane_data_13_TVALID;
    lane_data_14_TDATA <= process_lanes_U0_lane_data_14_TDATA;
    lane_data_14_TVALID <= process_lanes_U0_lane_data_14_TVALID;
    lane_data_15_TDATA <= process_lanes_U0_lane_data_15_TDATA;
    lane_data_15_TVALID <= process_lanes_U0_lane_data_15_TVALID;
    lane_data_1_TDATA <= process_lanes_U0_lane_data_1_TDATA;
    lane_data_1_TVALID <= process_lanes_U0_lane_data_1_TVALID;
    lane_data_2_TDATA <= process_lanes_U0_lane_data_2_TDATA;
    lane_data_2_TVALID <= process_lanes_U0_lane_data_2_TVALID;
    lane_data_3_TDATA <= process_lanes_U0_lane_data_3_TDATA;
    lane_data_3_TVALID <= process_lanes_U0_lane_data_3_TVALID;
    lane_data_4_TDATA <= process_lanes_U0_lane_data_4_TDATA;
    lane_data_4_TVALID <= process_lanes_U0_lane_data_4_TVALID;
    lane_data_5_TDATA <= process_lanes_U0_lane_data_5_TDATA;
    lane_data_5_TVALID <= process_lanes_U0_lane_data_5_TVALID;
    lane_data_6_TDATA <= process_lanes_U0_lane_data_6_TDATA;
    lane_data_6_TVALID <= process_lanes_U0_lane_data_6_TVALID;
    lane_data_7_TDATA <= process_lanes_U0_lane_data_7_TDATA;
    lane_data_7_TVALID <= process_lanes_U0_lane_data_7_TVALID;
    lane_data_8_TDATA <= process_lanes_U0_lane_data_8_TDATA;
    lane_data_8_TVALID <= process_lanes_U0_lane_data_8_TVALID;
    lane_data_9_TDATA <= process_lanes_U0_lane_data_9_TDATA;
    lane_data_9_TVALID <= process_lanes_U0_lane_data_9_TVALID;
    process_lanes_U0_ap_continue <= ap_const_logic_1;
    process_lanes_U0_ap_start <= (iq_M_real_7_channel_empty_n and iq_M_real_6_channel_empty_n and iq_M_real_5_channel_empty_n and iq_M_real_4_channel_empty_n and iq_M_real_3_channel_empty_n and iq_M_real_2_channel_empty_n and iq_M_real_1_channel_empty_n and iq_M_real_0_channel_empty_n and iq_M_imag_7_channel_empty_n and iq_M_imag_6_channel_empty_n and iq_M_imag_5_channel_empty_n and iq_M_imag_4_channel_empty_n and iq_M_imag_3_channel_empty_n and iq_M_imag_2_channel_empty_n and iq_M_imag_1_channel_empty_n and iq_M_imag_0_channel_empty_n);
    process_lanes_U0_start_full_n <= ap_const_logic_1;
    process_lanes_U0_start_write <= ap_const_logic_0;
    qstream_data_TREADY <= Block_codeRepl5_proc_U0_qstream_data_TREADY;
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adc_to_opfb_adc2iq (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        istream_V_TDATA,
        istream_V_TVALID,
        istream_V_TREADY,
        qstream_V_TDATA,
        qstream_V_TVALID,
        qstream_V_TREADY,
        iq1_din,
        iq1_full_n,
        iq1_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] istream_V_TDATA;
input   istream_V_TVALID;
output   istream_V_TREADY;
input  [127:0] qstream_V_TDATA;
input   qstream_V_TVALID;
output   qstream_V_TREADY;
output  [255:0] iq1_din;
input   iq1_full_n;
output   iq1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg iq1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    istream_V_TDATA_blk_n;
reg    qstream_V_TDATA_blk_n;
reg    ap_block_state1;
wire   [15:0] tmp_9_fu_213_p4;
wire   [15:0] p_Result_6_fu_203_p4;
wire   [15:0] tmp_8_fu_193_p4;
wire   [15:0] p_Result_5_fu_183_p4;
wire   [15:0] tmp_7_fu_173_p4;
wire   [15:0] p_Result_3_fu_163_p4;
wire   [15:0] tmp_6_fu_153_p4;
wire   [15:0] p_Result_2_fu_143_p4;
wire   [15:0] tmp_5_fu_133_p4;
wire   [15:0] p_Result_1_fu_123_p4;
wire   [15:0] tmp_4_fu_113_p4;
wire   [15:0] p_Result_s_fu_103_p4;
wire   [15:0] tmp_3_fu_93_p4;
wire   [15:0] p_Result_7_fu_83_p4;
wire   [15:0] trunc_ln1528_fu_79_p1;
wire   [15:0] trunc_ln674_fu_75_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    regslice_both_istream_V_U_apdone_blk;
wire   [127:0] istream_V_TDATA_int_regslice;
wire    istream_V_TVALID_int_regslice;
reg    istream_V_TREADY_int_regslice;
wire    regslice_both_istream_V_U_ack_in;
wire    regslice_both_qstream_V_U_apdone_blk;
wire   [127:0] qstream_V_TDATA_int_regslice;
wire    qstream_V_TVALID_int_regslice;
reg    qstream_V_TREADY_int_regslice;
wire    regslice_both_qstream_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

adc_to_opfb_regslice_both #(
    .DataWidth( 128 ))
regslice_both_istream_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istream_V_TDATA),
    .vld_in(istream_V_TVALID),
    .ack_in(regslice_both_istream_V_U_ack_in),
    .data_out(istream_V_TDATA_int_regslice),
    .vld_out(istream_V_TVALID_int_regslice),
    .ack_out(istream_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_istream_V_U_apdone_blk)
);

adc_to_opfb_regslice_both #(
    .DataWidth( 128 ))
regslice_both_qstream_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(qstream_V_TDATA),
    .vld_in(qstream_V_TVALID),
    .ack_in(regslice_both_qstream_V_U_ack_in),
    .data_out(qstream_V_TDATA_int_regslice),
    .vld_out(qstream_V_TVALID_int_regslice),
    .ack_out(qstream_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_qstream_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (iq1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iq1_write = 1'b1;
    end else begin
        iq1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        istream_V_TDATA_blk_n = istream_V_TVALID_int_regslice;
    end else begin
        istream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        istream_V_TREADY_int_regslice = 1'b1;
    end else begin
        istream_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qstream_V_TDATA_blk_n = qstream_V_TVALID_int_regslice;
    end else begin
        qstream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        qstream_V_TREADY_int_regslice = 1'b1;
    end else begin
        qstream_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (qstream_V_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (istream_V_TVALID_int_regslice == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign iq1_din = {{{{{{{{{{{{{{{{tmp_9_fu_213_p4}, {p_Result_6_fu_203_p4}}, {tmp_8_fu_193_p4}}, {p_Result_5_fu_183_p4}}, {tmp_7_fu_173_p4}}, {p_Result_3_fu_163_p4}}, {tmp_6_fu_153_p4}}, {p_Result_2_fu_143_p4}}, {tmp_5_fu_133_p4}}, {p_Result_1_fu_123_p4}}, {tmp_4_fu_113_p4}}, {p_Result_s_fu_103_p4}}, {tmp_3_fu_93_p4}}, {p_Result_7_fu_83_p4}}, {trunc_ln1528_fu_79_p1}}, {trunc_ln674_fu_75_p1}};

assign istream_V_TREADY = regslice_both_istream_V_U_ack_in;

assign p_Result_1_fu_123_p4 = {{istream_V_TDATA_int_regslice[63:48]}};

assign p_Result_2_fu_143_p4 = {{istream_V_TDATA_int_regslice[79:64]}};

assign p_Result_3_fu_163_p4 = {{istream_V_TDATA_int_regslice[95:80]}};

assign p_Result_5_fu_183_p4 = {{istream_V_TDATA_int_regslice[111:96]}};

assign p_Result_6_fu_203_p4 = {{istream_V_TDATA_int_regslice[127:112]}};

assign p_Result_7_fu_83_p4 = {{istream_V_TDATA_int_regslice[31:16]}};

assign p_Result_s_fu_103_p4 = {{istream_V_TDATA_int_regslice[47:32]}};

assign qstream_V_TREADY = regslice_both_qstream_V_U_ack_in;

assign start_out = real_start;

assign tmp_3_fu_93_p4 = {{qstream_V_TDATA_int_regslice[31:16]}};

assign tmp_4_fu_113_p4 = {{qstream_V_TDATA_int_regslice[47:32]}};

assign tmp_5_fu_133_p4 = {{qstream_V_TDATA_int_regslice[63:48]}};

assign tmp_6_fu_153_p4 = {{qstream_V_TDATA_int_regslice[79:64]}};

assign tmp_7_fu_173_p4 = {{qstream_V_TDATA_int_regslice[95:80]}};

assign tmp_8_fu_193_p4 = {{qstream_V_TDATA_int_regslice[111:96]}};

assign tmp_9_fu_213_p4 = {{qstream_V_TDATA_int_regslice[127:112]}};

assign trunc_ln1528_fu_79_p1 = qstream_V_TDATA_int_regslice[15:0];

assign trunc_ln674_fu_75_p1 = istream_V_TDATA_int_regslice[15:0];

endmodule //adc_to_opfb_adc2iq

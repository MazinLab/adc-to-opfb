// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adc_to_opfb_process_lanes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        iq1_dout,
        iq1_empty_n,
        iq1_read,
        lanes_TREADY,
        lanes_TDATA,
        lanes_TVALID,
        lanes_TKEEP,
        lanes_TSTRB,
        lanes_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] iq1_dout;
input   iq1_empty_n;
output   iq1_read;
input   lanes_TREADY;
output  [511:0] lanes_TDATA;
output   lanes_TVALID;
output  [63:0] lanes_TKEEP;
output  [63:0] lanes_TSTRB;
output  [0:0] lanes_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg iq1_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] primed_load_reg_205;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [0:0] primed_load_reg_205_pp0_iter1_reg;
wire    regslice_both_lanes_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] cycle_V;
reg   [255:0] even_lane_z1_V;
reg   [0:0] primed;
reg    even_delay_Array_ce0;
reg    even_delay_Array_we0;
wire   [255:0] even_delay_Array_q0;
reg    odd_delay_Array_ce0;
reg    odd_delay_Array_we0;
wire   [255:0] odd_delay_Array_q0;
reg    iq1_blk_n;
wire    ap_block_pp0_stage0;
reg    lanes_TDATA_blk_n;
reg   [255:0] tmp_2_reg_180;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] p_Result_s_fu_89_p1;
reg   [0:0] p_Result_s_reg_188;
wire   [0:0] xor_ln32_fu_93_p2;
reg   [0:0] xor_ln32_reg_195;
wire   [0:0] lane_last_V_fu_99_p2;
reg   [0:0] lane_last_V_reg_200;
wire   [511:0] lane_data_V_fu_159_p3;
wire   [8:0] add_ln870_fu_121_p2;
wire   [255:0] select_ln52_fu_168_p3;
wire   [0:0] or_ln54_fu_109_p2;
reg    ap_block_pp0_stage0_01001;
wire   [255:0] select_ln42_fu_153_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg   [511:0] lanes_TDATA_int_regslice;
reg    lanes_TVALID_int_regslice;
wire    lanes_TREADY_int_regslice;
wire    regslice_both_lanes_V_data_V_U_vld_out;
wire    regslice_both_lanes_V_keep_V_U_apdone_blk;
wire    regslice_both_lanes_V_keep_V_U_ack_in_dummy;
wire    regslice_both_lanes_V_keep_V_U_vld_out;
wire    regslice_both_lanes_V_strb_V_U_apdone_blk;
wire    regslice_both_lanes_V_strb_V_U_ack_in_dummy;
wire    regslice_both_lanes_V_strb_V_U_vld_out;
wire    regslice_both_lanes_V_last_V_U_apdone_blk;
wire    regslice_both_lanes_V_last_V_U_ack_in_dummy;
wire    regslice_both_lanes_V_last_V_U_vld_out;
reg    ap_condition_167;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 cycle_V = 9'd0;
#0 even_lane_z1_V = 256'd0;
#0 primed = 1'd0;
end

adc_to_opfb_process_lanes_even_delay_Array #(
    .DataWidth( 256 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
even_delay_Array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(even_delay_Array_ce0),
    .we0(even_delay_Array_we0),
    .d0(tmp_2_reg_180),
    .q0(even_delay_Array_q0)
);

adc_to_opfb_process_lanes_even_delay_Array #(
    .DataWidth( 256 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
odd_delay_Array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(odd_delay_Array_ce0),
    .we0(odd_delay_Array_we0),
    .d0(tmp_2_reg_180),
    .q0(odd_delay_Array_q0)
);

adc_to_opfb_regslice_both #(
    .DataWidth( 512 ))
regslice_both_lanes_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(lanes_TDATA_int_regslice),
    .vld_in(lanes_TVALID_int_regslice),
    .ack_in(lanes_TREADY_int_regslice),
    .data_out(lanes_TDATA),
    .vld_out(regslice_both_lanes_V_data_V_U_vld_out),
    .ack_out(lanes_TREADY),
    .apdone_blk(regslice_both_lanes_V_data_V_U_apdone_blk)
);

adc_to_opfb_regslice_both #(
    .DataWidth( 64 ))
regslice_both_lanes_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd0),
    .vld_in(lanes_TVALID_int_regslice),
    .ack_in(regslice_both_lanes_V_keep_V_U_ack_in_dummy),
    .data_out(lanes_TKEEP),
    .vld_out(regslice_both_lanes_V_keep_V_U_vld_out),
    .ack_out(lanes_TREADY),
    .apdone_blk(regslice_both_lanes_V_keep_V_U_apdone_blk)
);

adc_to_opfb_regslice_both #(
    .DataWidth( 64 ))
regslice_both_lanes_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd0),
    .vld_in(lanes_TVALID_int_regslice),
    .ack_in(regslice_both_lanes_V_strb_V_U_ack_in_dummy),
    .data_out(lanes_TSTRB),
    .vld_out(regslice_both_lanes_V_strb_V_U_vld_out),
    .ack_out(lanes_TREADY),
    .apdone_blk(regslice_both_lanes_V_strb_V_U_apdone_blk)
);

adc_to_opfb_regslice_both #(
    .DataWidth( 1 ))
regslice_both_lanes_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(lane_last_V_reg_200),
    .vld_in(lanes_TVALID_int_regslice),
    .ack_in(regslice_both_lanes_V_last_V_U_ack_in_dummy),
    .data_out(lanes_TLAST),
    .vld_out(regslice_both_lanes_V_last_V_U_vld_out),
    .ack_out(lanes_TREADY),
    .apdone_blk(regslice_both_lanes_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cycle_V <= add_ln870_fu_121_p2;
        primed <= or_ln54_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        even_lane_z1_V <= select_ln52_fu_168_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lane_last_V_reg_200 <= lane_last_V_fu_99_p2;
        p_Result_s_reg_188 <= p_Result_s_fu_89_p1;
        primed_load_reg_205 <= primed;
        primed_load_reg_205_pp0_iter1_reg <= primed_load_reg_205;
        tmp_2_reg_180 <= iq1_dout;
        xor_ln32_reg_195 <= xor_ln32_fu_93_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        even_delay_Array_ce0 = xor_ln32_reg_195;
    end else begin
        even_delay_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        even_delay_Array_we0 = xor_ln32_reg_195;
    end else begin
        even_delay_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq1_blk_n = iq1_empty_n;
    end else begin
        iq1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq1_read = 1'b1;
    end else begin
        iq1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (primed_load_reg_205_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (primed_load_reg_205_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (primed_load_reg_205 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (primed_load_reg_205 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        lanes_TDATA_blk_n = lanes_TREADY_int_regslice;
    end else begin
        lanes_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_167)) begin
        if ((primed_load_reg_205 == 1'd1)) begin
            lanes_TDATA_int_regslice = lane_data_V_fu_159_p3;
        end else if ((primed_load_reg_205 == 1'd0)) begin
            lanes_TDATA_int_regslice = 512'd0;
        end else begin
            lanes_TDATA_int_regslice = 'bx;
        end
    end else begin
        lanes_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (primed_load_reg_205 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (primed_load_reg_205 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        lanes_TVALID_int_regslice = 1'b1;
    end else begin
        lanes_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odd_delay_Array_ce0 = p_Result_s_reg_188;
    end else begin
        odd_delay_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odd_delay_Array_we0 = p_Result_s_reg_188;
    end else begin
        odd_delay_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_121_p2 = (cycle_V + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_lanes_V_data_V_U_apdone_blk == 1'b1) | ((primed_load_reg_205_pp0_iter1_reg == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205_pp0_iter1_reg == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((primed_load_reg_205 == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205 == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | (iq1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_lanes_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((primed_load_reg_205_pp0_iter1_reg == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205_pp0_iter1_reg == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((primed_load_reg_205 == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205 == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | (iq1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_lanes_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((primed_load_reg_205_pp0_iter1_reg == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205_pp0_iter1_reg == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((primed_load_reg_205 == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205 == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | (iq1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (iq1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((primed_load_reg_205 == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205 == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((primed_load_reg_205 == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205 == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((primed_load_reg_205_pp0_iter1_reg == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205_pp0_iter1_reg == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_lanes_V_data_V_U_apdone_blk == 1'b1) | ((primed_load_reg_205_pp0_iter1_reg == 1'd1) & (lanes_TREADY_int_regslice == 1'b0)) | ((primed_load_reg_205_pp0_iter1_reg == 1'd0) & (lanes_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_167 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign lane_data_V_fu_159_p3 = {{select_ln42_fu_153_p3}, {even_lane_z1_V}};

assign lane_last_V_fu_99_p2 = ((cycle_V == 9'd511) ? 1'b1 : 1'b0);

assign lanes_TVALID = regslice_both_lanes_V_data_V_U_vld_out;

assign or_ln54_fu_109_p2 = (primed | lane_last_V_fu_99_p2);

assign p_Result_s_fu_89_p1 = cycle_V[0:0];

assign select_ln42_fu_153_p3 = ((p_Result_s_reg_188[0:0] == 1'b1) ? tmp_2_reg_180 : odd_delay_Array_q0);

assign select_ln52_fu_168_p3 = ((p_Result_s_reg_188[0:0] == 1'b1) ? even_delay_Array_q0 : tmp_2_reg_180);

assign xor_ln32_fu_93_p2 = (p_Result_s_fu_89_p1 ^ 1'd1);

endmodule //adc_to_opfb_process_lanes
